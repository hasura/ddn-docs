{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MetadataObject",
  "anyOf": [
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SupergraphOrSubgraphObject",
      "anyOf": [
        {
          "$ref": "#/anyOf/0/definitions/SupergraphObject"
        },
        {
          "$ref": "#/anyOf/0/definitions/SubgraphObject"
        }
      ],
      "definitions": {
        "SupergraphObject": {
          "$id": "https://hasura.io/jsonschemas/metadata/SupergraphObject",
          "title": "SupergraphObject",
          "anyOf": [
            {
              "$ref": "#/anyOf/0/definitions/HasuraSupergraphObject"
            },
            {
              "$ref": "#/anyOf/0/definitions/OpenDdSupergraphObject"
            }
          ]
        },
        "HasuraSupergraphObject": {
          "$id": "https://hasura.io/jsonschemas/metadata/HasuraSupergraphObject",
          "title": "HasuraSupergraphObject",
          "oneOf": [
            {
              "$id": "https://hasura.io/jsonschemas/metadata/CompatibilityConfig",
              "title": "CompatibilityConfig",
              "description": "The compatibility configuration of the Hasura metadata.",
              "type": "object",
              "required": ["date", "kind"],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": ["CompatibilityConfig"]
                },
                "date": {
                  "description": "Any backwards incompatible changes made to Hasura DDN after this date won't impact the metadata.",
                  "allOf": [
                    {
                      "$ref": "#/anyOf/0/definitions/CompatibilityDate"
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/AuthConfig",
              "title": "AuthConfig",
              "description": "Definition of the authentication configuration used by the API server.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["AuthConfig"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/AuthConfigV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "CompatibilityDate": {
          "type": "string",
          "format": "date"
        },
        "AuthConfigV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/AuthConfigV1",
          "title": "AuthConfigV1",
          "description": "Definition of the authentication configuration used by the API server.",
          "type": "object",
          "required": ["mode"],
          "properties": {
            "allowRoleEmulationBy": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Role"
                },
                {
                  "type": "null"
                }
              ]
            },
            "mode": {
              "$ref": "#/anyOf/0/definitions/AuthModeConfig"
            }
          },
          "additionalProperties": false
        },
        "Role": {
          "$id": "https://hasura.io/jsonschemas/metadata/Role",
          "title": "Role",
          "type": "string"
        },
        "AuthModeConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/AuthModeConfig",
          "title": "AuthModeConfig",
          "description": "The configuration for the authentication mode to use - webhook or JWT.",
          "oneOf": [
            {
              "type": "object",
              "required": ["webhook"],
              "properties": {
                "webhook": {
                  "$ref": "#/anyOf/0/definitions/AuthHookConfig"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["jwt"],
              "properties": {
                "jwt": {
                  "$ref": "#/anyOf/0/definitions/JWTConfig"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "AuthHookConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/AuthHookConfig",
          "title": "AuthHookConfig",
          "description": "The configuration of the authentication webhook.",
          "examples": [
            {
              "url": "http://auth_hook:3050/validate-request",
              "method": "Post"
            }
          ],
          "type": "object",
          "required": ["method", "url"],
          "properties": {
            "url": {
              "description": "The URL of the authentication webhook.",
              "type": "string",
              "format": "uri"
            },
            "method": {
              "description": "The HTTP method to be used to make the request to the auth hook.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/AuthHookMethod"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AuthHookMethod": {
          "$id": "https://hasura.io/jsonschemas/metadata/AuthHookMethod",
          "title": "AuthHookMethod",
          "type": "string",
          "enum": ["Get", "Post"]
        },
        "JWTConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTConfig",
          "title": "JWTConfig",
          "description": "JWT config according to which the incoming JWT will be verified and decoded to extract the session variable claims.",
          "examples": [
            {
              "audience": null,
              "issuer": null,
              "allowedSkew": null,
              "claimsConfig": {
                "namespace": {
                  "claimsFormat": "Json",
                  "location": "/https:~1~1hasura.io~1jwt~1claims"
                }
              },
              "tokenLocation": {
                "type": "BearerAuthorization"
              },
              "key": {
                "fixed": {
                  "algorithm": "HS256",
                  "key": {
                    "value": "token"
                  }
                }
              }
            }
          ],
          "type": "object",
          "required": ["claimsConfig", "key", "tokenLocation"],
          "properties": {
            "audience": {
              "description": "Optional validation to check that the `aud` field is a member of the `audience` recieved, otherwise will throw error.",
              "type": ["array", "null"],
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "issuer": {
              "description": "Optional validation to check that the `iss` field is a member of the `iss` received, otherwise will throw error.",
              "type": ["string", "null"]
            },
            "allowedSkew": {
              "description": "Allowed leeway (in seconds) to the `exp` validation to account for clock skew.",
              "type": ["integer", "null"],
              "format": "uint64",
              "minimum": 0
            },
            "claimsConfig": {
              "description": "Claims config. Either specified via `claims_mappings` or `claims_namespace_path`",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsConfig"
                }
              ]
            },
            "tokenLocation": {
              "description": "Source of the JWT authentication token.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTTokenLocation"
                }
              ]
            },
            "key": {
              "description": "Mode according to which the JWT auth is configured.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTKey"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "JWTClaimsConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsConfig",
          "title": "JWTClaimsConfig",
          "description": "Config to describe how/where the engine should look for the claims within the decoded token.",
          "oneOf": [
            {
              "type": "object",
              "required": ["locations"],
              "properties": {
                "locations": {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMap"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["namespace"],
              "properties": {
                "namespace": {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsNamespace"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "JWTClaimsMap": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMap",
          "title": "JWTClaimsMap",
          "description": "Can be used when Hasura claims are not all present in the single object, but individual claims are provided a JSON pointer within the decoded JWT and optionally a default value.",
          "type": "object",
          "required": ["x-hasura-allowed-roles", "x-hasura-default-role"],
          "properties": {
            "x-hasura-default-role": {
              "description": "JSON pointer to lookup the default role within the decoded JWT.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMappingEntry_for_Role"
                }
              ]
            },
            "x-hasura-allowed-roles": {
              "description": "JSON pointer to lookup the allowed roles within the decoded JWT.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMappingEntry_for_Array_of_Role"
                }
              ]
            }
          }
        },
        "JWTClaimsMappingEntry_for_Role": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingEntry_for_Role",
          "title": "JWTClaimsMappingEntry",
          "oneOf": [
            {
              "description": "Literal value of the claims mapping",
              "type": "object",
              "required": ["literal"],
              "properties": {
                "literal": {
                  "$ref": "#/anyOf/0/definitions/Role2"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
              "type": "object",
              "required": ["path"],
              "properties": {
                "path": {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMappingPathEntry_for_Role"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Role2": {
          "type": "string"
        },
        "JWTClaimsMappingPathEntry_for_Role": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingPathEntry_for_Role",
          "title": "JWTClaimsMappingPathEntry",
          "type": "object",
          "required": ["path"],
          "properties": {
            "path": {
              "description": "JSON pointer to find the particular claim in the decoded JWT token.",
              "type": "string",
              "format": "JSON pointer"
            },
            "default": {
              "description": "Default value to be used when no value is found when looking up the value using the `path`.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Role2"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "JWTClaimsMappingEntry_for_Array_of_Role": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingEntry_for_Array_of_Role",
          "title": "JWTClaimsMappingEntry",
          "oneOf": [
            {
              "description": "Literal value of the claims mapping",
              "type": "object",
              "required": ["literal"],
              "properties": {
                "literal": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/Role2"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
              "type": "object",
              "required": ["path"],
              "properties": {
                "path": {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMappingPathEntry_for_Array_of_Role"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "JWTClaimsMappingPathEntry_for_Array_of_Role": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingPathEntry_for_Array_of_Role",
          "title": "JWTClaimsMappingPathEntry",
          "type": "object",
          "required": ["path"],
          "properties": {
            "path": {
              "description": "JSON pointer to find the particular claim in the decoded JWT token.",
              "type": "string",
              "format": "JSON pointer"
            },
            "default": {
              "description": "Default value to be used when no value is found when looking up the value using the `path`.",
              "type": ["array", "null"],
              "items": {
                "$ref": "#/anyOf/0/definitions/Role2"
              }
            }
          },
          "additionalProperties": false
        },
        "JWTClaimsMappingEntry_for_SessionVariableValue": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingEntry_for_SessionVariableValue",
          "title": "JWTClaimsMappingEntry",
          "oneOf": [
            {
              "description": "Literal value of the claims mapping",
              "type": "object",
              "required": ["literal"],
              "properties": {
                "literal": {
                  "$ref": "#/anyOf/0/definitions/SessionVariableValue"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
              "type": "object",
              "required": ["path"],
              "properties": {
                "path": {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsMappingPathEntry_for_SessionVariableValue"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SessionVariableValue": {
          "type": "string"
        },
        "JWTClaimsMappingPathEntry_for_SessionVariableValue": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsMappingPathEntry_for_SessionVariableValue",
          "title": "JWTClaimsMappingPathEntry",
          "type": "object",
          "required": ["path"],
          "properties": {
            "path": {
              "description": "JSON pointer to find the particular claim in the decoded JWT token.",
              "type": "string",
              "format": "JSON pointer"
            },
            "default": {
              "description": "Default value to be used when no value is found when looking up the value using the `path`.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/SessionVariableValue"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "JWTClaimsNamespace": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsNamespace",
          "title": "JWTClaimsNamespace",
          "description": "Used when all of the Hasura claims are present in a single object within the decoded JWT.",
          "type": "object",
          "required": ["claimsFormat", "location"],
          "properties": {
            "claimsFormat": {
              "description": "Format in which the Hasura claims will be present.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/JWTClaimsFormat"
                }
              ]
            },
            "location": {
              "description": "Pointer to lookup the Hasura claims within the decoded claims.",
              "type": "string",
              "format": "JSON pointer"
            }
          },
          "additionalProperties": false
        },
        "JWTClaimsFormat": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTClaimsFormat",
          "title": "JWTClaimsFormat",
          "oneOf": [
            {
              "description": "Claims will be in the JSON format.",
              "type": "string",
              "enum": ["Json"]
            },
            {
              "description": "Claims will be in the Stringified JSON format.",
              "type": "string",
              "enum": ["StringifiedJson"]
            }
          ]
        },
        "JWTTokenLocation": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTTokenLocation",
          "title": "JWTTokenLocation",
          "description": "Source of the Authorization token",
          "oneOf": [
            {
              "description": "Get the bearer token from the `Authorization` header.",
              "type": "object",
              "required": ["type"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["BearerAuthorization"]
                }
              },
              "additionalProperties": false
            },
            {
              "title": "JWTCookieLocation",
              "description": "Get the token from the Cookie header under the specificied cookie name.",
              "type": "object",
              "required": ["name", "type"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["Cookie"]
                },
                "name": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "JWTHeaderLocation",
              "description": "Custom header from where the header should be parsed from.",
              "type": "object",
              "required": ["name", "type"],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["Header"]
                },
                "name": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "JWTKey": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTKey",
          "title": "JWTKey",
          "description": "JWT key configuration according to which the incoming JWT will be decoded.",
          "oneOf": [
            {
              "description": "JWT mode when the algorithm `type` and `key` is known",
              "type": "object",
              "required": ["fixed"],
              "properties": {
                "fixed": {
                  "$ref": "#/anyOf/0/definitions/JWTKeyConfig"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "JWT mode where the `type` and `key` parameters are obtained dynamically through JWK.",
              "type": "object",
              "required": ["jwkFromUrl"],
              "properties": {
                "jwkFromUrl": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "JWTKeyConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/JWTKeyConfig",
          "title": "JWTKeyConfig",
          "description": "JWT Secret config according to which the incoming JWT will be decoded.",
          "type": "object",
          "required": ["algorithm", "key"],
          "properties": {
            "algorithm": {
              "description": "The algorithm used to decode the JWT.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Algorithm"
                }
              ]
            },
            "key": {
              "description": "The key to use for decoding the JWT.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/EnvironmentValue"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Algorithm": {
          "$id": "https://hasura.io/jsonschemas/metadata/Algorithm",
          "title": "JWTAlgorithm",
          "description": "The algorithm used to decode the JWT.",
          "oneOf": [
            {
              "description": "HMAC using SHA-256",
              "type": "string",
              "enum": ["HS256"]
            },
            {
              "description": "HMAC using SHA-384",
              "type": "string",
              "enum": ["HS384"]
            },
            {
              "description": "HMAC using SHA-512",
              "type": "string",
              "enum": ["HS512"]
            },
            {
              "description": "ECDSA using SHA-256",
              "type": "string",
              "enum": ["ES256"]
            },
            {
              "description": "ECDSA using SHA-384",
              "type": "string",
              "enum": ["ES384"]
            },
            {
              "description": "RSASSA-PKCS1-v1_5 using SHA-256",
              "type": "string",
              "enum": ["RS256"]
            },
            {
              "description": "RSASSA-PKCS1-v1_5 using SHA-384",
              "type": "string",
              "enum": ["RS384"]
            },
            {
              "description": "RSASSA-PKCS1-v1_5 using SHA-512",
              "type": "string",
              "enum": ["RS512"]
            },
            {
              "description": "RSASSA-PSS using SHA-256",
              "type": "string",
              "enum": ["PS256"]
            },
            {
              "description": "RSASSA-PSS using SHA-384",
              "type": "string",
              "enum": ["PS384"]
            },
            {
              "description": "RSASSA-PSS using SHA-512",
              "type": "string",
              "enum": ["PS512"]
            },
            {
              "description": "Edwards-curve Digital Signature Algorithm (EdDSA)",
              "type": "string",
              "enum": ["EdDSA"]
            }
          ]
        },
        "EnvironmentValue": {
          "$id": "https://hasura.io/jsonschemas/EnvironmentValue",
          "title": "EnvironmentValue",
          "description": "Either a literal string or a reference to a Hasura secret",
          "oneOf": [
            {
              "type": "object",
              "required": ["value"],
              "properties": {
                "value": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["valueFromEnv"],
              "properties": {
                "valueFromEnv": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OpenDdSupergraphObject": {
          "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSupergraphObject",
          "title": "OpenDdSupergraphObject",
          "oneOf": [
            {
              "$id": "https://hasura.io/jsonschemas/metadata/GraphqlConfig",
              "title": "GraphqlConfig",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["GraphqlConfig"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/GraphqlConfigV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "GraphqlConfigV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphqlConfigV1",
          "title": "GraphqlConfigV1",
          "type": "object",
          "required": ["mutation", "query"],
          "properties": {
            "query": {
              "$ref": "#/anyOf/0/definitions/QueryGraphqlConfig"
            },
            "mutation": {
              "$ref": "#/anyOf/0/definitions/MutationGraphqlConfig"
            }
          },
          "additionalProperties": false
        },
        "QueryGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/QueryGraphqlConfig",
          "title": "QueryGraphqlConfig",
          "type": "object",
          "required": ["rootOperationTypeName"],
          "properties": {
            "rootOperationTypeName": {
              "type": "string"
            },
            "argumentsInput": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ArgumentsInputGraphqlConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "limitInput": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/LimitInputGraphqlConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offsetInput": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/OffsetInputGraphqlConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "filterInput": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/FilterInputGraphqlConfig"
                },
                {
                  "type": "null"
                }
              ]
            },
            "orderByInput": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/OrderByInputGraphqlConfig"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ArgumentsInputGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/ArgumentsInputGraphqlConfig",
          "title": "ArgumentsInputGraphqlConfig",
          "type": "object",
          "required": ["fieldName"],
          "properties": {
            "fieldName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "LimitInputGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/LimitInputGraphqlConfig",
          "title": "LimitInputGraphqlConfig",
          "type": "object",
          "required": ["fieldName"],
          "properties": {
            "fieldName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "OffsetInputGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/OffsetInputGraphqlConfig",
          "title": "OffsetInputGraphqlConfig",
          "type": "object",
          "required": ["fieldName"],
          "properties": {
            "fieldName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "FilterInputGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/FilterInputGraphqlConfig",
          "title": "FilterInputGraphqlConfig",
          "type": "object",
          "required": ["fieldName", "operatorNames"],
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "operatorNames": {
              "$ref": "#/anyOf/0/definitions/FilterInputOperatorNames"
            }
          },
          "additionalProperties": false
        },
        "FilterInputOperatorNames": {
          "$id": "https://hasura.io/jsonschemas/metadata/FilterInputOperatorNames",
          "title": "FilterInputOperatorNames",
          "type": "object",
          "required": ["and", "isNull", "not", "or"],
          "properties": {
            "and": {
              "type": "string"
            },
            "or": {
              "type": "string"
            },
            "not": {
              "type": "string"
            },
            "isNull": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "OrderByInputGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderByInputGraphqlConfig",
          "title": "OrderByInputGraphqlConfig",
          "type": "object",
          "required": ["enumDirectionValues", "enumTypeNames", "fieldName"],
          "properties": {
            "fieldName": {
              "type": "string"
            },
            "enumDirectionValues": {
              "$ref": "#/anyOf/0/definitions/OrderByDirectionValues"
            },
            "enumTypeNames": {
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/OrderByEnumTypeName"
              }
            }
          },
          "additionalProperties": false
        },
        "OrderByDirectionValues": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirectionValues",
          "title": "OrderByDirectionValues",
          "type": "object",
          "required": ["asc", "desc"],
          "properties": {
            "asc": {
              "type": "string"
            },
            "desc": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "OrderByEnumTypeName": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderByEnumTypeName",
          "title": "OrderByEnumTypeName",
          "type": "object",
          "required": ["directions", "typeName"],
          "properties": {
            "directions": {
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/OrderByDirection"
              }
            },
            "typeName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "OrderByDirection": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirection",
          "title": "OrderByDirection",
          "type": "string",
          "enum": ["Asc", "Desc"]
        },
        "MutationGraphqlConfig": {
          "$id": "https://hasura.io/jsonschemas/metadata/MutationGraphqlConfig",
          "title": "MutationGraphqlConfig",
          "type": "object",
          "required": ["rootOperationTypeName"],
          "properties": {
            "rootOperationTypeName": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "SubgraphObject": {
          "$id": "https://hasura.io/jsonschemas/metadata/SubgraphObject",
          "title": "SubgraphObject",
          "anyOf": [
            {
              "$ref": "#/anyOf/0/definitions/OpenDdSubgraphObject"
            }
          ]
        },
        "OpenDdSubgraphObject": {
          "$id": "https://hasura.io/jsonschemas/metadata/OpenDdSubgraphObject",
          "title": "OpenDdSubgraphObject",
          "oneOf": [
            {
              "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorLink",
              "title": "DataConnectorLink",
              "description": "Definition of a data connector, used to bring in sources of data and connect them to OpenDD models and commands.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["DataConnectorLink"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/DataConnectorLinkV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/ObjectType",
              "title": "ObjectType",
              "description": "Definition of a user-defined Open DD object type.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ObjectType"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/ObjectTypeV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/ScalarType",
              "title": "ScalarType",
              "description": "Definition of a user-defined scalar type that that has opaque semantics.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ScalarType"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/ScalarTypeV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionType",
              "title": "ObjectBooleanExpressionType",
              "description": "Definition of a type representing a boolean expression on an Open DD object type.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ObjectBooleanExpressionType"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/ObjectBooleanExpressionTypeV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarRepresentation",
              "title": "DataConnectorScalarRepresentation",
              "description": "The representation of a data connector scalar in terms of Open DD types",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["DataConnectorScalarRepresentation"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/DataConnectorScalarRepresentationV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/Model",
              "title": "Model",
              "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Model"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/ModelV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/Command",
              "title": "Command",
              "description": "The definition of a command. A command is a user-defined operation which can take arguments and returns an output. The semantics of a command are opaque to the Open DD specification.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Command"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/CommandV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/Relationship",
              "title": "Relationship",
              "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Relationship"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/RelationshipV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/TypePermissions",
              "title": "TypePermissions",
              "description": "Definition of permissions for an OpenDD type.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["TypePermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/TypePermissionsV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/ModelPermissions",
              "title": "ModelPermissions",
              "description": "Definition of permissions for an OpenDD model.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ModelPermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/ModelPermissionsV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "$id": "https://hasura.io/jsonschemas/metadata/CommandPermissions",
              "title": "CommandPermissions",
              "description": "Definition of permissions for an OpenDD command.",
              "oneOf": [
                {
                  "type": "object",
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["CommandPermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/anyOf/0/definitions/CommandPermissionsV1"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "DataConnectorLinkV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorLinkV1",
          "title": "DataConnectorLinkV1",
          "description": "Definition of a data connector - version 1.",
          "examples": [
            {
              "name": "data_connector",
              "url": {
                "singleUrl": {
                  "value": "http://data_connector:8100"
                }
              },
              "headers": {},
              "schema": {
                "version": "v0.1",
                "schema": {
                  "scalar_types": {},
                  "object_types": {},
                  "collections": [],
                  "functions": [],
                  "procedures": []
                },
                "capabilities": {
                  "version": "0.1.0",
                  "capabilities": {
                    "query": {
                      "variables": {}
                    },
                    "mutation": {}
                  }
                }
              }
            }
          ],
          "type": "object",
          "required": ["name", "schema", "url"],
          "properties": {
            "name": {
              "description": "The name of the data connector.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorName"
                }
              ]
            },
            "url": {
              "description": "The url(s) to access the data connector.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorUrlV1"
                }
              ]
            },
            "headers": {
              "description": "Key value map of HTTP headers to be sent with each request to the data connector.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "$ref": "#/anyOf/0/definitions/EnvironmentValue"
              }
            },
            "schema": {
              "description": "The schema of the data connector. This schema is used as the source of truth when serving requests and the live schema of the data connector is not looked up.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "DataConnectorName": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorName",
          "title": "DataConnectorName",
          "description": "The name of a data connector.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "DataConnectorUrlV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorUrlV1",
          "title": "DataConnectorUrlV1",
          "oneOf": [
            {
              "type": "object",
              "required": ["singleUrl"],
              "properties": {
                "singleUrl": {
                  "$ref": "#/anyOf/0/definitions/EnvironmentValue"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["readWriteUrls"],
              "properties": {
                "readWriteUrls": {
                  "$ref": "#/anyOf/0/definitions/ReadWriteUrls"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ReadWriteUrls": {
          "$id": "https://hasura.io/jsonschemas/metadata/ReadWriteUrls",
          "title": "ReadWriteUrls",
          "type": "object",
          "required": ["read", "write"],
          "properties": {
            "read": {
              "$ref": "#/anyOf/0/definitions/EnvironmentValue"
            },
            "write": {
              "$ref": "#/anyOf/0/definitions/EnvironmentValue"
            }
          },
          "additionalProperties": false
        },
        "VersionedSchemaAndCapabilities": {
          "$id": "https://hasura.io/jsonschemas/metadata/VersionedSchemaAndCapabilities",
          "title": "VersionedSchemaAndCapabilities",
          "oneOf": [
            {
              "title": "SchemaAndCapabilitiesV01",
              "type": "object",
              "required": ["capabilities", "schema", "version"],
              "properties": {
                "version": {
                  "type": "string",
                  "enum": ["v0.1"]
                },
                "schema": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Schema Response",
                  "type": "object",
                  "required": ["collections", "functions", "object_types", "procedures", "scalar_types"],
                  "properties": {
                    "scalar_types": {
                      "description": "A list of scalar types which will be used as the types of collection columns",
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ScalarType"
                      }
                    },
                    "object_types": {
                      "description": "A list of object types which can be used as the types of arguments, or return types of procedures. Names should not overlap with scalar type names.",
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ObjectType"
                      }
                    },
                    "collections": {
                      "description": "Collections which are available for queries",
                      "type": "array",
                      "items": {
                        "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/CollectionInfo"
                      }
                    },
                    "functions": {
                      "description": "Functions (i.e. collections which return a single column and row)",
                      "type": "array",
                      "items": {
                        "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/FunctionInfo"
                      }
                    },
                    "procedures": {
                      "description": "Procedures which are available for execution as part of mutations",
                      "type": "array",
                      "items": {
                        "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ProcedureInfo"
                      }
                    }
                  },
                  "definitions": {
                    "ScalarType": {
                      "title": "Scalar Type",
                      "description": "The definition of a scalar type, i.e. types that can be used as the types of columns.",
                      "type": "object",
                      "required": ["aggregate_functions", "comparison_operators"],
                      "properties": {
                        "aggregate_functions": {
                          "description": "A map from aggregate function names to their definitions. Result type names must be defined scalar types declared in ScalarTypesCapabilities.",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/AggregateFunctionDefinition"
                          }
                        },
                        "comparison_operators": {
                          "description": "A map from comparison operator names to their definitions. Argument type names must be defined scalar types declared in ScalarTypesCapabilities.",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ComparisonOperatorDefinition"
                          }
                        }
                      }
                    },
                    "AggregateFunctionDefinition": {
                      "title": "Aggregate Function Definition",
                      "description": "The definition of an aggregation function on a scalar type",
                      "type": "object",
                      "required": ["result_type"],
                      "properties": {
                        "result_type": {
                          "description": "The scalar or object type of the result of this function",
                          "allOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                            }
                          ]
                        }
                      }
                    },
                    "Type": {
                      "title": "Type",
                      "description": "Types track the valid representations of values as JSON",
                      "oneOf": [
                        {
                          "description": "A named type",
                          "type": "object",
                          "required": ["name", "type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["named"]
                            },
                            "name": {
                              "description": "The name can refer to a primitive type or a scalar type",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "description": "A nullable type",
                          "type": "object",
                          "required": ["type", "underlying_type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["nullable"]
                            },
                            "underlying_type": {
                              "description": "The type of the non-null inhabitants of this type",
                              "allOf": [
                                {
                                  "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "description": "An array type",
                          "type": "object",
                          "required": ["element_type", "type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["array"]
                            },
                            "element_type": {
                              "description": "The type of the elements of the array",
                              "allOf": [
                                {
                                  "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "description": "A predicate type for a given object type",
                          "type": "object",
                          "required": ["object_type_name", "type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["predicate"]
                            },
                            "object_type_name": {
                              "description": "The object type name",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    },
                    "ComparisonOperatorDefinition": {
                      "title": "Comparison Operator Definition",
                      "description": "The definition of a comparison operator on a scalar type",
                      "oneOf": [
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["equal"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["in"]
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": ["argument_type", "type"],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": ["custom"]
                            },
                            "argument_type": {
                              "description": "The type of the argument to this operator",
                              "allOf": [
                                {
                                  "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    "ObjectType": {
                      "title": "Object Type",
                      "description": "The definition of an object type",
                      "type": "object",
                      "required": ["fields"],
                      "properties": {
                        "description": {
                          "description": "Description of this type",
                          "type": ["string", "null"]
                        },
                        "fields": {
                          "description": "Fields defined on this object type",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ObjectField"
                          }
                        }
                      }
                    },
                    "ObjectField": {
                      "title": "Object Field",
                      "description": "The definition of an object field",
                      "type": "object",
                      "required": ["type"],
                      "properties": {
                        "description": {
                          "description": "Description of this field",
                          "type": ["string", "null"]
                        },
                        "type": {
                          "description": "The type of this field",
                          "allOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                            }
                          ]
                        }
                      }
                    },
                    "CollectionInfo": {
                      "title": "Collection Info",
                      "type": "object",
                      "required": ["arguments", "foreign_keys", "name", "type", "uniqueness_constraints"],
                      "properties": {
                        "name": {
                          "description": "The name of the collection\n\nNote: these names are abstract - there is no requirement that this name correspond to the name of an actual collection in the database.",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the collection",
                          "type": ["string", "null"]
                        },
                        "arguments": {
                          "description": "Any arguments that this collection requires",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ArgumentInfo"
                          }
                        },
                        "type": {
                          "description": "The name of the collection's object type",
                          "type": "string"
                        },
                        "uniqueness_constraints": {
                          "description": "Any uniqueness constraints enforced on this collection",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/UniquenessConstraint"
                          }
                        },
                        "foreign_keys": {
                          "description": "Any foreign key constraints enforced on this collection",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ForeignKeyConstraint"
                          }
                        }
                      }
                    },
                    "ArgumentInfo": {
                      "title": "Argument Info",
                      "type": "object",
                      "required": ["type"],
                      "properties": {
                        "description": {
                          "description": "Argument description",
                          "type": ["string", "null"]
                        },
                        "type": {
                          "description": "The name of the type of this argument",
                          "allOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                            }
                          ]
                        }
                      }
                    },
                    "UniquenessConstraint": {
                      "title": "Uniqueness Constraint",
                      "type": "object",
                      "required": ["unique_columns"],
                      "properties": {
                        "unique_columns": {
                          "description": "A list of columns which this constraint requires to be unique",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "ForeignKeyConstraint": {
                      "title": "Foreign Key Constraint",
                      "type": "object",
                      "required": ["column_mapping", "foreign_collection"],
                      "properties": {
                        "column_mapping": {
                          "description": "The columns on which you want want to define the foreign key.",
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "foreign_collection": {
                          "description": "The name of a collection",
                          "type": "string"
                        }
                      }
                    },
                    "FunctionInfo": {
                      "title": "Function Info",
                      "type": "object",
                      "required": ["arguments", "name", "result_type"],
                      "properties": {
                        "name": {
                          "description": "The name of the function",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of the function",
                          "type": ["string", "null"]
                        },
                        "arguments": {
                          "description": "Any arguments that this collection requires",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ArgumentInfo"
                          }
                        },
                        "result_type": {
                          "description": "The name of the function's result type",
                          "allOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                            }
                          ]
                        }
                      }
                    },
                    "ProcedureInfo": {
                      "title": "Procedure Info",
                      "type": "object",
                      "required": ["arguments", "name", "result_type"],
                      "properties": {
                        "name": {
                          "description": "The name of the procedure",
                          "type": "string"
                        },
                        "description": {
                          "description": "Column description",
                          "type": ["string", "null"]
                        },
                        "arguments": {
                          "description": "Any arguments that this collection requires",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/ArgumentInfo"
                          }
                        },
                        "result_type": {
                          "description": "The name of the result type",
                          "allOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/schema/definitions/Type"
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "capabilities": {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "title": "Capabilities Response",
                  "type": "object",
                  "required": ["capabilities", "version"],
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "capabilities": {
                      "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/Capabilities"
                    }
                  },
                  "definitions": {
                    "Capabilities": {
                      "title": "Capabilities",
                      "description": "Describes the features of the specification which a data connector implements.",
                      "type": "object",
                      "required": ["mutation", "query"],
                      "properties": {
                        "query": {
                          "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/QueryCapabilities"
                        },
                        "mutation": {
                          "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/MutationCapabilities"
                        },
                        "relationships": {
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/RelationshipCapabilities"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      }
                    },
                    "QueryCapabilities": {
                      "title": "Query Capabilities",
                      "type": "object",
                      "properties": {
                        "aggregates": {
                          "description": "Does the connector support aggregate queries",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "variables": {
                          "description": "Does the connector support queries which use variables",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "explain": {
                          "description": "Does the connector support explaining queries",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      }
                    },
                    "LeafCapability": {
                      "description": "A unit value to indicate a particular leaf capability is supported. This is an empty struct to allow for future sub-capabilities.",
                      "type": "object"
                    },
                    "MutationCapabilities": {
                      "title": "Mutation Capabilities",
                      "type": "object",
                      "properties": {
                        "transactional": {
                          "description": "Does the connector support executing multiple mutations in a transaction.",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "explain": {
                          "description": "Does the connector support explaining mutations",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      }
                    },
                    "RelationshipCapabilities": {
                      "title": "Relationship Capabilities",
                      "type": "object",
                      "properties": {
                        "relation_comparisons": {
                          "description": "Does the connector support comparisons that involve related collections (ie. joins)?",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "order_by_aggregate": {
                          "description": "Does the connector support ordering by an aggregated array relationship?",
                          "anyOf": [
                            {
                              "$ref": "#/anyOf/0/definitions/VersionedSchemaAndCapabilities/oneOf/0/properties/capabilities/definitions/LeafCapability"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ObjectTypeV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectTypeV1",
          "title": "ObjectTypeV1",
          "description": "Definition of a user-defined Open DD object type.",
          "examples": [
            {
              "name": "Author",
              "fields": [
                {
                  "name": "author_id",
                  "type": "Int!",
                  "description": "The id of the author"
                },
                {
                  "name": "first_name",
                  "type": "String",
                  "description": "The first name of the author"
                },
                {
                  "name": "last_name",
                  "type": "String",
                  "description": "The last name of the author"
                }
              ],
              "description": "An author of a book",
              "globalIdFields": ["author_id"],
              "graphql": {
                "typeName": "Author"
              },
              "dataConnectorTypeMapping": [
                {
                  "dataConnectorName": "my_db",
                  "dataConnectorObjectType": "author",
                  "fieldMapping": {
                    "author_id": {
                      "column": {
                        "name": "id"
                      }
                    }
                  }
                }
              ]
            }
          ],
          "type": "object",
          "required": ["fields", "name"],
          "properties": {
            "name": {
              "description": "The name to give this object type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "fields": {
              "description": "The list of fields defined for this object type.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/FieldDefinition"
              }
            },
            "globalIdFields": {
              "description": "The subset of fields that uniquely identify this object in the domain. Setting this property will automatically implement the GraphQL Relay Node interface for this object type and add an `id` global ID field. If setting this property, there must not be a field named `id` already present.",
              "type": ["array", "null"],
              "items": {
                "$ref": "#/anyOf/0/definitions/FieldName"
              }
            },
            "graphql": {
              "description": "Configuration for how this object type should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ObjectTypeGraphQLConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of the object. Gets added to the description of the object's definition in the graphql schema.",
              "type": ["string", "null"]
            },
            "dataConnectorTypeMapping": {
              "description": "Mapping of this object type to corresponding object types in various data connectors.",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/DataConnectorTypeMapping"
              }
            }
          },
          "additionalProperties": false
        },
        "CustomTypeName": {
          "$id": "https://hasura.io/jsonschemas/metadata/CustomTypeName",
          "title": "CustomTypeName",
          "description": "The name of a user-defined type.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "FieldDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/FieldDefinition",
          "title": "ObjectFieldDefinition",
          "description": "The definition of a field in a user-defined object type.",
          "type": "object",
          "required": ["name", "type"],
          "properties": {
            "name": {
              "description": "The name of the field. This name is used both when referring to the field elsewhere in the metadata and when creating the corresponding GraphQl type.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/FieldName"
                }
              ]
            },
            "type": {
              "description": "The type of this field. This uses the GraphQL syntax to represent field types and must refer to one of the inbuilt OpenDd types or another user-defined type.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/TypeReference"
                }
              ]
            },
            "description": {
              "description": "The description of this field. Gets added to the description of the field's definition in the graphql schema.",
              "type": ["string", "null"]
            },
            "deprecated": {
              "description": "Whether this field is deprecated. If set, the deprecation status is added to the field's graphql schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Deprecated"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "FieldName": {
          "$id": "https://hasura.io/jsonschemas/metadata/FieldName",
          "title": "FieldName",
          "description": "The name of a field in a user-defined object type.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "TypeReference": {
          "$id": "https://hasura.io/jsonschemas/metadata/TypeReference",
          "title": "TypeReference",
          "description": "A reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.",
          "type": "string"
        },
        "Deprecated": {
          "$id": "https://hasura.io/jsonschemas/metadata/Deprecated",
          "title": "Deprecated",
          "description": "OpenDd configuration to indicate whether an object type field, relationship, model root field or command root field is deprecated.",
          "type": "object",
          "properties": {
            "reason": {
              "description": "The reason for deprecation.",
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "ObjectTypeGraphQLConfiguration": {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectTypeGraphQLConfiguration",
          "title": "ObjectTypeGraphQLConfiguration",
          "description": "GraphQL configuration of an Open DD object type.",
          "type": "object",
          "properties": {
            "typeName": {
              "description": "The name to use for the GraphQL type representation of this object type when used in an output context.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "inputTypeName": {
              "description": "The name to use for the GraphQL type representation of this object type when used in an input context.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "GraphQlTypeName": {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphQlTypeName",
          "title": "GraphQlTypeName",
          "type": "string"
        },
        "DataConnectorTypeMapping": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorTypeMapping",
          "title": "DataConnectorTypeMapping",
          "description": "This defines the mapping of the fields of an object type to the corresponding columns of an object type in a data connector.",
          "type": "object",
          "required": ["dataConnectorName", "dataConnectorObjectType"],
          "properties": {
            "dataConnectorName": {
              "$ref": "#/anyOf/0/definitions/DataConnectorName"
            },
            "dataConnectorObjectType": {
              "type": "string"
            },
            "fieldMapping": {
              "default": {},
              "type": "object",
              "additionalProperties": {
                "$ref": "#/anyOf/0/definitions/FieldMapping"
              }
            }
          },
          "additionalProperties": false
        },
        "FieldMapping": {
          "$id": "https://hasura.io/jsonschemas/metadata/FieldMapping",
          "title": "ObjectFieldMapping",
          "oneOf": [
            {
              "description": "Source field directly maps to some column in the data connector.",
              "type": "object",
              "required": ["column"],
              "properties": {
                "column": {
                  "$ref": "#/anyOf/0/definitions/ColumnFieldMapping"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ColumnFieldMapping": {
          "$id": "https://hasura.io/jsonschemas/metadata/ColumnFieldMapping",
          "title": "ColumnFieldMapping",
          "description": "The target column in a data connector object that a source field maps to.",
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "description": "The name of the target column",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ScalarTypeV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/ScalarTypeV1",
          "title": "ScalarTypeV1",
          "description": "Definition of a user-defined scalar type that that has opaque semantics.",
          "examples": [
            {
              "name": "CustomString",
              "graphql": {
                "typeName": "CustomString"
              },
              "description": "A custom string type"
            }
          ],
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "description": "The name to give this scalar type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "graphql": {
              "description": "Configuration for how this scalar type should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ScalarTypeGraphQLConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of this scalar. Gets added to the description of the scalar's definition in the graphql schema.",
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "ScalarTypeGraphQLConfiguration": {
          "$id": "https://hasura.io/jsonschemas/metadata/ScalarTypeGraphQLConfiguration",
          "title": "ScalarTypeGraphQLConfiguration",
          "description": "GraphQL configuration of an Open DD scalar type",
          "type": "object",
          "required": ["typeName"],
          "properties": {
            "typeName": {
              "description": "The name of the GraphQl type to use for this scalar.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ObjectBooleanExpressionTypeV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionTypeV1",
          "title": "ObjectBooleanExpressionTypeV1",
          "description": "Definition of a type representing a boolean expression on an Open DD object type.",
          "examples": [
            {
              "name": "AuthorBoolExp",
              "objectType": "Author",
              "dataConnectorName": "my_db",
              "dataConnectorObjectType": "author",
              "comparableFields": [
                {
                  "fieldName": "article_id",
                  "operators": {
                    "enableAll": true
                  }
                },
                {
                  "fieldName": "title",
                  "operators": {
                    "enableAll": true
                  }
                },
                {
                  "fieldName": "author_id",
                  "operators": {
                    "enableAll": true
                  }
                }
              ],
              "graphql": {
                "typeName": "Author_bool_exp"
              }
            }
          ],
          "type": "object",
          "required": ["comparableFields", "dataConnectorName", "dataConnectorObjectType", "name", "objectType"],
          "properties": {
            "name": {
              "description": "The name to give this object boolean expression type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "objectType": {
              "description": "The name of the object type that this boolean expression applies to.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "dataConnectorName": {
              "description": "The data connector this boolean expression type is based on.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorName"
                }
              ]
            },
            "dataConnectorObjectType": {
              "description": "The object type in the data connector's schema this boolean expression type is based on.",
              "type": "string"
            },
            "comparableFields": {
              "description": "The list of fields of the object type that can be used for comparison when evaluating this boolean expression.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ComparableField"
              }
            },
            "graphql": {
              "description": "Configuration for how this object type should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ObjectBooleanExpressionTypeGraphQlConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ComparableField": {
          "$id": "https://hasura.io/jsonschemas/metadata/ComparableField",
          "title": "ComparableField",
          "type": "object",
          "required": ["fieldName", "operators"],
          "properties": {
            "fieldName": {
              "$ref": "#/anyOf/0/definitions/FieldName"
            },
            "operators": {
              "$ref": "#/anyOf/0/definitions/EnableAllOrSpecific_for_OperatorName"
            }
          },
          "additionalProperties": false
        },
        "EnableAllOrSpecific_for_OperatorName": {
          "$id": "https://hasura.io/jsonschemas/metadata/EnableAllOrSpecific_for_OperatorName",
          "title": "EnableAllOrSpecific",
          "oneOf": [
            {
              "type": "object",
              "required": ["enableAll"],
              "properties": {
                "enableAll": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["enableSpecific"],
              "properties": {
                "enableSpecific": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/OperatorName"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OperatorName": {
          "type": "string"
        },
        "ObjectBooleanExpressionTypeGraphQlConfiguration": {
          "$id": "https://hasura.io/jsonschemas/metadata/ObjectBooleanExpressionTypeGraphQlConfiguration",
          "title": "ObjectBooleanExpressionTypeGraphQlConfiguration",
          "description": "GraphQL configuration of an Open DD boolean expression type.",
          "type": "object",
          "required": ["typeName"],
          "properties": {
            "typeName": {
              "description": "The name to use for the GraphQL type representation of this boolean expression type.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "DataConnectorScalarRepresentationV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarRepresentationV1",
          "title": "DataConnectorScalarRepresentationV1",
          "description": "The representation of a data connector scalar in terms of Open DD types",
          "examples": [
            {
              "dataConnectorName": "data_connector",
              "dataConnectorScalarType": "varchar",
              "representation": "String",
              "graphql": {
                "comparisonExpressionTypeName": "String_Comparison_Exp"
              }
            }
          ],
          "type": "object",
          "required": ["dataConnectorName", "dataConnectorScalarType", "representation"],
          "properties": {
            "dataConnectorName": {
              "description": "The name of the data connector that this scalar type comes from.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorName"
                }
              ]
            },
            "dataConnectorScalarType": {
              "description": "The name of the scalar type coming from the data connector.",
              "type": "string"
            },
            "representation": {
              "description": "The name of the Open DD type that this data connector scalar type should be represented as.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/TypeName"
                }
              ]
            },
            "graphql": {
              "description": "Configuration for how this scalar's operators should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorScalarGraphQLConfiguration"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "TypeName": {
          "anyOf": [
            {
              "$ref": "#/anyOf/0/definitions/InbuiltType"
            },
            {
              "$ref": "#/anyOf/0/definitions/CustomTypeName"
            }
          ]
        },
        "InbuiltType": {
          "$id": "https://hasura.io/jsonschemas/metadata/InbuiltType",
          "title": "InbuiltType",
          "description": "An inbuilt primitive OpenDD type.",
          "type": "string",
          "enum": ["ID", "Int", "Float", "Boolean", "String"]
        },
        "DataConnectorScalarGraphQLConfiguration": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorScalarGraphQLConfiguration",
          "title": "DataConnectorScalarGraphQLConfiguration",
          "description": "GraphQL configuration of a data connector scalar",
          "type": "object",
          "properties": {
            "comparisonExpressionTypeName": {
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ModelV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelV1",
          "title": "ModelV1",
          "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
          "examples": [
            {
              "name": "Articles",
              "objectType": "article",
              "globalIdSource": true,
              "arguments": [],
              "source": {
                "dataConnectorName": "data_connector",
                "collection": "articles",
                "argumentMapping": {}
              },
              "filterExpressionType": "Article_bool_exp",
              "orderableFields": [
                {
                  "fieldName": "article_id",
                  "orderByDirections": {
                    "enableAll": true
                  }
                },
                {
                  "fieldName": "title",
                  "orderByDirections": {
                    "enableAll": true
                  }
                },
                {
                  "fieldName": "author_id",
                  "orderByDirections": {
                    "enableAll": true
                  }
                }
              ],
              "graphql": {
                "selectUniques": [
                  {
                    "queryRootField": "ArticleByID",
                    "uniqueIdentifier": ["article_id"],
                    "description": "Description for the select unique ArticleByID"
                  }
                ],
                "selectMany": {
                  "queryRootField": "ArticleMany",
                  "description": "Description for the select many ArticleMany"
                },
                "orderByExpressionType": "Article_Order_By"
              },
              "description": "Description for the model Articles"
            }
          ],
          "type": "object",
          "required": ["name", "objectType", "orderableFields"],
          "properties": {
            "name": {
              "description": "The name of the data model.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelName"
                }
              ]
            },
            "objectType": {
              "description": "The type of the objects of which this model is a collection.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "globalIdSource": {
              "description": "Whether this model should be used as the global ID source for all objects of its type.",
              "default": false,
              "type": "boolean"
            },
            "arguments": {
              "description": "A list of arguments accepted by this model. Defaults to no arguments.",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ArgumentDefinition"
              }
            },
            "source": {
              "description": "The source configuration for this model.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelSource"
                },
                {
                  "type": "null"
                }
              ]
            },
            "filterExpressionType": {
              "description": "The boolean expression type that should be used to perform filtering on this model.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "orderableFields": {
              "description": "A list of fields that can be used to order the objects in this model.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/OrderableField"
              }
            },
            "graphql": {
              "description": "Configuration for how this model should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelGraphQlDefinition"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of the model. Gets added to the description of the model in the graphql schema.",
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "ModelName": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelName",
          "title": "ModelName",
          "description": "The name of data model.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "ArgumentDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/ArgumentDefinition",
          "title": "ArgumentDefinition",
          "description": "The definition of an argument for a field, command, or model.",
          "type": "object",
          "required": ["name", "type"],
          "properties": {
            "name": {
              "$ref": "#/anyOf/0/definitions/ArgumentName"
            },
            "type": {
              "$ref": "#/anyOf/0/definitions/TypeReference"
            },
            "description": {
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "ArgumentName": {
          "$id": "https://hasura.io/jsonschemas/metadata/ArgumentName",
          "title": "ArgumentName",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "ModelSource": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelSource",
          "title": "ModelSource",
          "description": "Description of how a model maps to a particular data connector",
          "examples": [
            {
              "dataConnectorName": "data_connector",
              "collection": "articles"
            }
          ],
          "type": "object",
          "required": ["collection", "dataConnectorName"],
          "properties": {
            "dataConnectorName": {
              "description": "The name of the data connector backing this model.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorName"
                }
              ]
            },
            "collection": {
              "description": "The collection in the data connector that backs this model.",
              "type": "string"
            },
            "argumentMapping": {
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "OrderableField": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderableField",
          "title": "OrderableField",
          "type": "object",
          "required": ["fieldName", "orderByDirections"],
          "properties": {
            "fieldName": {
              "$ref": "#/anyOf/0/definitions/FieldName"
            },
            "orderByDirections": {
              "$ref": "#/anyOf/0/definitions/EnableAllOrSpecific_for_OrderByDirection"
            }
          },
          "additionalProperties": false
        },
        "EnableAllOrSpecific_for_OrderByDirection": {
          "$id": "https://hasura.io/jsonschemas/metadata/EnableAllOrSpecific_for_OrderByDirection",
          "title": "EnableAllOrSpecific",
          "oneOf": [
            {
              "type": "object",
              "required": ["enableAll"],
              "properties": {
                "enableAll": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["enableSpecific"],
              "properties": {
                "enableSpecific": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/OrderByDirection2"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OrderByDirection2": {
          "$id": "https://hasura.io/jsonschemas/metadata/OrderByDirection2",
          "title": "OrderByDirection",
          "type": "string",
          "enum": ["Asc", "Desc"]
        },
        "ModelGraphQlDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelGraphQlDefinition",
          "title": "ModelGraphQlDefinition",
          "description": "The definition of how a model appears in the GraphQL API.",
          "examples": [
            {
              "selectUniques": [
                {
                  "queryRootField": "ArticleByID",
                  "uniqueIdentifier": ["article_id"],
                  "description": "Description for the select unique ArticleByID"
                }
              ],
              "selectMany": {
                "queryRootField": "ArticleMany",
                "description": "Description for the select many ArticleMany"
              },
              "orderByExpressionType": "Article_Order_By"
            }
          ],
          "type": "object",
          "required": ["selectUniques"],
          "properties": {
            "selectUniques": {
              "description": "For each select unique defined here, a query root field is added to the GraphQL API that can be used to select a unique object from the model.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/SelectUniqueGraphQlDefinition"
              }
            },
            "selectMany": {
              "description": "Select many configuration for a model adds a query root field to the GraphQl API that can be used to retrieve multiple objects from the model.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/SelectManyGraphQlDefinition"
                },
                {
                  "type": "null"
                }
              ]
            },
            "argumentsInputType": {
              "description": "The type name of the input type used to hold the arguments of the model.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                },
                {
                  "type": "null"
                }
              ]
            },
            "orderByExpressionType": {
              "description": "The type name of the order by expression input type.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlTypeName"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SelectUniqueGraphQlDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/SelectUniqueGraphQlDefinition",
          "title": "SelectUniqueGraphQlDefinition",
          "description": "The definition of the GraphQL API for selecting a unique row/object from a model.",
          "type": "object",
          "required": ["queryRootField", "uniqueIdentifier"],
          "properties": {
            "queryRootField": {
              "description": "The name of the query root field for this API.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlFieldName"
                }
              ]
            },
            "uniqueIdentifier": {
              "description": "A set of fields which can uniquely identify a row/object in the model.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/FieldName"
              }
            },
            "description": {
              "description": "The description of the select unique graphql definition of the model. Gets added to the description of the select unique root field of the model in the graphql schema.",
              "type": ["string", "null"]
            },
            "deprecated": {
              "description": "Whether this select unique query field is deprecated. If set, the deprecation status is added to the select unique root field's graphql schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Deprecated"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "GraphQlFieldName": {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphQlFieldName",
          "title": "GraphQlFieldName",
          "description": "The name of a GraphQL object field.",
          "type": "string"
        },
        "SelectManyGraphQlDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/SelectManyGraphQlDefinition",
          "title": "SelectManyGraphQlDefinition",
          "description": "The definition of the GraphQL API for selecting rows from a model.",
          "type": "object",
          "required": ["queryRootField"],
          "properties": {
            "queryRootField": {
              "description": "The name of the query root field for this API.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlFieldName"
                }
              ]
            },
            "description": {
              "description": "The description of the select many graphql definition of the model. Gets added to the description of the select many root field of the model in the graphql schema.",
              "type": ["string", "null"]
            },
            "deprecated": {
              "description": "Whether this select many query field is deprecated. If set, the deprecation status is added to the select many root field's graphql schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Deprecated"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "CommandV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandV1",
          "title": "CommandV1",
          "description": "Definition of an OpenDD Command, which is a custom operation that can take arguments and returns an output. The semantics of a command are opaque to OpenDD.",
          "examples": [
            {
              "name": "get_latest_article",
              "outputType": "commandArticle",
              "arguments": [],
              "source": {
                "dataConnectorName": "data_connector",
                "dataConnectorCommand": {
                  "function": "latest_article"
                },
                "argumentMapping": {}
              },
              "graphql": {
                "rootFieldName": "getLatestArticle",
                "rootFieldKind": "Query"
              },
              "description": "Get the latest article"
            }
          ],
          "type": "object",
          "required": ["name", "outputType"],
          "properties": {
            "name": {
              "description": "The name of the command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CommandName"
                }
              ]
            },
            "outputType": {
              "description": "The return type of the command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/TypeReference"
                }
              ]
            },
            "arguments": {
              "description": "The list of arguments accepted by this command. Defaults to no arguments.",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ArgumentDefinition"
              }
            },
            "source": {
              "description": "The source configuration for this command.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CommandSource"
                },
                {
                  "type": "null"
                }
              ]
            },
            "graphql": {
              "description": "Configuration for how this command should appear in the GraphQL schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CommandGraphQlDefinition"
                },
                {
                  "type": "null"
                }
              ]
            },
            "description": {
              "description": "The description of the command. Gets added to the description of the command's root field in the graphql schema.",
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "CommandName": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandName",
          "title": "CommandName",
          "description": "The name of a command.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "CommandSource": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandSource",
          "title": "CommandSource",
          "description": "Description of how a command maps to a particular data connector",
          "examples": [
            {
              "dataConnectorName": "data_connector",
              "dataConnectorCommand": {
                "function": "latest_article"
              },
              "argumentMapping": {}
            }
          ],
          "type": "object",
          "required": ["dataConnectorCommand", "dataConnectorName"],
          "properties": {
            "dataConnectorName": {
              "description": "The name of the data connector backing this command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorName"
                }
              ]
            },
            "dataConnectorCommand": {
              "description": "The function/procedure in the data connector that backs this command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/DataConnectorCommand"
                }
              ]
            },
            "argumentMapping": {
              "description": "Mapping from command argument names to data connector table argument names.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        },
        "DataConnectorCommand": {
          "$id": "https://hasura.io/jsonschemas/metadata/DataConnectorCommand",
          "title": "DataConnectorCommand",
          "oneOf": [
            {
              "title": "Function",
              "type": "object",
              "required": ["function"],
              "properties": {
                "function": {
                  "$ref": "#/anyOf/0/definitions/FunctionName"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "Procedure",
              "type": "object",
              "required": ["procedure"],
              "properties": {
                "procedure": {
                  "$ref": "#/anyOf/0/definitions/ProcedureName"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FunctionName": {
          "description": "The name of a function backing the command.",
          "type": "string"
        },
        "ProcedureName": {
          "description": "The name of a procedure backing the command.",
          "type": "string"
        },
        "CommandGraphQlDefinition": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandGraphQlDefinition",
          "title": "CommandGraphQlDefinition",
          "description": "The definition of how a command should appear in the GraphQL API.",
          "examples": [
            {
              "rootFieldName": "getLatestArticle",
              "rootFieldKind": "Query"
            }
          ],
          "type": "object",
          "required": ["rootFieldKind", "rootFieldName"],
          "properties": {
            "rootFieldName": {
              "description": "The name of the graphql root field to use for this command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlFieldName"
                }
              ]
            },
            "rootFieldKind": {
              "description": "Whether to put this command in the Query or Mutation root of the GraphQL API.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/GraphQlRootFieldKind"
                }
              ]
            },
            "deprecated": {
              "description": "Whether this command root field is deprecated. If set, this will be added to the graphql schema as a deprecated field.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Deprecated"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "GraphQlRootFieldKind": {
          "$id": "https://hasura.io/jsonschemas/metadata/GraphQlRootFieldKind",
          "title": "GraphQlRootFieldKind",
          "type": "string",
          "enum": ["Query", "Mutation"]
        },
        "RelationshipV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipV1",
          "title": "RelationshipV1",
          "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
          "examples": [
            {
              "name": "Articles",
              "source": "author",
              "target": {
                "model": {
                  "name": "Articles",
                  "namespace": null,
                  "subgraph": null,
                  "relationshipType": "Array"
                }
              },
              "mapping": [
                {
                  "source": {
                    "fieldPath": [
                      {
                        "fieldName": "author_id"
                      }
                    ]
                  },
                  "target": {
                    "modelField": [
                      {
                        "fieldName": "author_id"
                      }
                    ]
                  }
                }
              ],
              "description": "Articles written by an author"
            }
          ],
          "type": "object",
          "required": ["mapping", "name", "source", "target"],
          "properties": {
            "name": {
              "description": "The name of the relationship.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipName"
                }
              ]
            },
            "source": {
              "description": "The source type of the relationship.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "target": {
              "description": "The target of the relationship.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipTarget"
                }
              ]
            },
            "mapping": {
              "description": "The mapping configuration of source to target for the relationship.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/RelationshipMapping"
              }
            },
            "description": {
              "description": "The description of the relationship. Gets added to the description of the relationship in the graphql schema.",
              "type": ["string", "null"]
            },
            "deprecated": {
              "description": "Whether this relationship is deprecated. If set, the deprecation status is added to the relationship field's graphql schema.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Deprecated"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RelationshipName": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipName",
          "title": "RelationshipName",
          "description": "The name of the GraphQL relationship field.",
          "type": "string",
          "pattern": "^[_a-zA-Z][_a-zA-Z0-9]*$"
        },
        "RelationshipTarget": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipTarget",
          "title": "RelationshipTarget",
          "description": "The target for a relationship.",
          "examples": [
            {
              "model": {
                "name": "Articles",
                "namespace": null,
                "subgraph": null,
                "relationshipType": "Array"
              }
            }
          ],
          "oneOf": [
            {
              "type": "object",
              "required": ["model"],
              "properties": {
                "model": {
                  "$ref": "#/anyOf/0/definitions/ModelRelationshipTarget"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["command"],
              "properties": {
                "command": {
                  "$ref": "#/anyOf/0/definitions/CommandRelationshipTarget"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ModelRelationshipTarget": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelRelationshipTarget",
          "title": "ModelRelationshipTarget",
          "description": "The target model for a relationship.",
          "type": "object",
          "required": ["name", "relationshipType"],
          "properties": {
            "name": {
              "description": "The name of the data model.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelName"
                }
              ]
            },
            "namespace": {
              "type": ["string", "null"]
            },
            "subgraph": {
              "description": "The subgraph of the target model. Defaults to the current subgraph.",
              "type": ["string", "null"]
            },
            "relationshipType": {
              "description": "Type of the relationship - object or array.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipType"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RelationshipType": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipType",
          "title": "RelationshipType",
          "description": "Type of the relationship.",
          "oneOf": [
            {
              "description": "Select one related object from the target.",
              "type": "string",
              "enum": ["Object"]
            },
            {
              "description": "Select multiple related objects from the target.",
              "type": "string",
              "enum": ["Array"]
            }
          ]
        },
        "CommandRelationshipTarget": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandRelationshipTarget",
          "title": "CommandRelationshipTarget",
          "description": "The target command for a relationship.",
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "description": "The name of the command.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CommandName"
                }
              ]
            },
            "subgraph": {
              "description": "The subgraph of the target command. Defaults to the current subgraph.",
              "type": ["string", "null"]
            }
          },
          "additionalProperties": false
        },
        "RelationshipMapping": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMapping",
          "title": "RelationshipMapping",
          "description": "Definition of a how a particular field in the source maps to a target field or argument.",
          "examples": [
            {
              "source": {
                "fieldPath": [
                  {
                    "fieldName": "author_id"
                  }
                ]
              },
              "target": {
                "modelField": [
                  {
                    "fieldName": "author_id"
                  }
                ]
              }
            }
          ],
          "type": "object",
          "required": ["source", "target"],
          "properties": {
            "source": {
              "description": "The source configuration for this relationship mapping.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipMappingSource"
                }
              ]
            },
            "target": {
              "description": "The target configuration for this relationship mapping.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipMappingTarget"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RelationshipMappingSource": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMappingSource",
          "title": "RelationshipMappingSource",
          "description": "The source configuration for a relationship mapping.",
          "oneOf": [
            {
              "title": "SourceValue",
              "type": "object",
              "required": ["value"],
              "properties": {
                "value": {
                  "$ref": "#/anyOf/0/definitions/ValueExpression"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "SourceField",
              "type": "object",
              "required": ["fieldPath"],
              "properties": {
                "fieldPath": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/FieldAccess"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ValueExpression": {
          "$id": "https://hasura.io/jsonschemas/metadata/ValueExpression",
          "title": "ValueExpression",
          "description": "An expression which evaluates to a value that can be used in permissions.",
          "oneOf": [
            {
              "title": "Literal",
              "type": "object",
              "required": ["literal"],
              "properties": {
                "literal": true
              },
              "additionalProperties": false
            },
            {
              "title": "SessionVariable",
              "type": "object",
              "required": ["sessionVariable"],
              "properties": {
                "sessionVariable": {
                  "$ref": "#/anyOf/0/definitions/OpenDdSessionVariable"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OpenDdSessionVariable": {
          "description": "Used to represent the name of a session variable, like \"x-hasura-role\".",
          "type": "string"
        },
        "FieldAccess": {
          "$id": "https://hasura.io/jsonschemas/metadata/FieldAccess",
          "title": "RelationshipSourceFieldAccess",
          "type": "object",
          "required": ["fieldName"],
          "properties": {
            "fieldName": {
              "$ref": "#/anyOf/0/definitions/FieldName"
            }
          },
          "additionalProperties": false
        },
        "RelationshipMappingTarget": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipMappingTarget",
          "title": "RelationshipMappingTarget",
          "description": "The target configuration for a relationship mapping.",
          "oneOf": [
            {
              "title": "TargetArgument",
              "type": "object",
              "required": ["argument"],
              "properties": {
                "argument": {
                  "$ref": "#/anyOf/0/definitions/ArgumentMappingTarget"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "TargetModelField",
              "type": "object",
              "required": ["modelField"],
              "properties": {
                "modelField": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/FieldAccess"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ArgumentMappingTarget": {
          "$id": "https://hasura.io/jsonschemas/metadata/ArgumentMappingTarget",
          "title": "ArgumentMappingTarget",
          "type": "object",
          "required": ["argumentName"],
          "properties": {
            "argumentName": {
              "$ref": "#/anyOf/0/definitions/ArgumentName"
            }
          },
          "additionalProperties": false
        },
        "TypePermissionsV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/TypePermissionsV1",
          "title": "TypePermissionsV1",
          "description": "Definition of permissions for an OpenDD type.",
          "examples": [
            {
              "typeName": "article",
              "permissions": [
                {
                  "role": "admin",
                  "output": {
                    "allowedFields": ["article_id", "author_id", "title"]
                  }
                },
                {
                  "role": "user",
                  "output": {
                    "allowedFields": ["article_id", "author_id"]
                  }
                }
              ]
            }
          ],
          "type": "object",
          "required": ["permissions", "typeName"],
          "properties": {
            "typeName": {
              "description": "The name of the type for which permissions are being defined. Must be an object type.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CustomTypeName"
                }
              ]
            },
            "permissions": {
              "description": "A list of type permissions, one for each role.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/TypePermission"
              }
            }
          },
          "additionalProperties": false
        },
        "TypePermission": {
          "$id": "https://hasura.io/jsonschemas/metadata/TypePermission",
          "title": "TypePermission",
          "description": "Defines permissions for a particular role for a type.",
          "examples": [
            {
              "role": "user",
              "output": {
                "allowedFields": ["article_id", "author_id"]
              }
            }
          ],
          "type": "object",
          "required": ["role"],
          "properties": {
            "role": {
              "description": "The role for which permissions are being defined.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Role"
                }
              ]
            },
            "output": {
              "description": "Permissions for this role when this type is used in an output context. If null, this type is inaccessible for this role in an output context.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/TypeOutputPermission"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "TypeOutputPermission": {
          "$id": "https://hasura.io/jsonschemas/metadata/TypeOutputPermission",
          "title": "TypeOutputPermission",
          "description": "Permissions for a type for a particular role when used in an output context.",
          "type": "object",
          "required": ["allowedFields"],
          "properties": {
            "allowedFields": {
              "description": "Fields of the type that are accessible for a role",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/FieldName"
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        },
        "ModelPermissionsV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelPermissionsV1",
          "title": "ModelPermissionsV1",
          "description": "Definition of permissions for an OpenDD model.",
          "examples": [
            {
              "modelName": "Articles",
              "permissions": [
                {
                  "role": "admin",
                  "select": {
                    "filter": null
                  }
                },
                {
                  "role": "user",
                  "select": {
                    "filter": {
                      "fieldComparison": {
                        "field": "author_id",
                        "operator": "_eq",
                        "value": {
                          "sessionVariable": "x-hasura-user-id"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ],
          "type": "object",
          "required": ["modelName", "permissions"],
          "properties": {
            "modelName": {
              "description": "The name of the model for which permissions are being defined.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelName"
                }
              ]
            },
            "permissions": {
              "description": "A list of model permissions, one for each role.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ModelPermission"
              }
            }
          },
          "additionalProperties": false
        },
        "ModelPermission": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelPermission",
          "title": "ModelPermission",
          "description": "Defines the permissions for an OpenDD model.",
          "examples": [
            {
              "role": "user",
              "select": {
                "filter": {
                  "fieldComparison": {
                    "field": "author_id",
                    "operator": "_eq",
                    "value": {
                      "sessionVariable": "x-hasura-user-id"
                    }
                  }
                },
                "argument_presets": [
                  {
                    "field": "likes_dogs",
                    "value": {
                      "literal": true
                    }
                  }
                ]
              }
            }
          ],
          "type": "object",
          "required": ["role"],
          "properties": {
            "role": {
              "description": "The role for which permissions are being defined.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Role"
                }
              ]
            },
            "select": {
              "description": "The permissions for selecting from this model for this role. If this is null, the role is not allowed to query the model.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/SelectPermission"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "SelectPermission": {
          "$id": "https://hasura.io/jsonschemas/metadata/SelectPermission",
          "title": "SelectPermission",
          "description": "Defines the permissions for selecting a model for a role.",
          "type": "object",
          "required": ["filter"],
          "properties": {
            "filter": {
              "description": "Filter expression when selecting rows for this model. Null filter implies all rows are selectable.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/NullableModelPredicate"
                }
              ]
            },
            "argumentPresets": {
              "description": "Preset values for arguments for this role",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ArgumentPreset"
              }
            }
          },
          "additionalProperties": false
        },
        "NullableModelPredicate": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/anyOf/0/definitions/ModelPredicate"
            }
          ]
        },
        "ModelPredicate": {
          "$id": "https://hasura.io/jsonschemas/metadata/ModelPredicate",
          "title": "ModelPredicate",
          "description": "A predicate that can be used to restrict the objects returned when querying a model.",
          "examples": [
            {
              "fieldComparison": {
                "field": "author_id",
                "operator": "_eq",
                "value": {
                  "sessionVariable": "x-hasura-user-id"
                }
              }
            }
          ],
          "oneOf": [
            {
              "description": "Filters objects based on a field value.",
              "type": "object",
              "required": ["fieldComparison"],
              "properties": {
                "fieldComparison": {
                  "$ref": "#/anyOf/0/definitions/FieldComparisonPredicate"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": ["fieldIsNull"],
              "properties": {
                "fieldIsNull": {
                  "type": "object",
                  "required": ["field"],
                  "properties": {
                    "field": {
                      "$ref": "#/anyOf/0/definitions/FieldName"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Filters objects based on the relationship of a model.",
              "type": "object",
              "required": ["relationship"],
              "properties": {
                "relationship": {
                  "$ref": "#/anyOf/0/definitions/RelationshipPredicate"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "And",
              "description": "Evaluates to true if all sub-predicates evaluate to true.",
              "type": "object",
              "required": ["and"],
              "properties": {
                "and": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/ModelPredicate"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "title": "Or",
              "description": "Evaluates to true if any of the sub-predicates evaluate to true.",
              "type": "object",
              "required": ["or"],
              "properties": {
                "or": {
                  "type": "array",
                  "items": {
                    "$ref": "#/anyOf/0/definitions/ModelPredicate"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "title": "Not",
              "description": "Evaluates to true if the sub-predicate evaluates to false.",
              "type": "object",
              "required": ["not"],
              "properties": {
                "not": {
                  "$ref": "#/anyOf/0/definitions/ModelPredicate"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FieldComparisonPredicate": {
          "$id": "https://hasura.io/jsonschemas/metadata/FieldComparisonPredicate",
          "title": "FieldComparisonPredicate",
          "description": "Field comparision predicate filters objects based on a field value.",
          "type": "object",
          "required": ["field", "operator", "value"],
          "properties": {
            "field": {
              "description": "The field name of the object type of the model to compare.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/FieldName"
                }
              ]
            },
            "operator": {
              "description": "The name of the operator to use for comparison.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/OperatorName"
                }
              ]
            },
            "value": {
              "description": "The value expression to compare against.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ValueExpression"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "RelationshipPredicate": {
          "$id": "https://hasura.io/jsonschemas/metadata/RelationshipPredicate",
          "title": "RelationshipPredicate",
          "description": "Relationship predicate filters objects of a source model based on a predicate on the related model.",
          "type": "object",
          "required": ["name"],
          "properties": {
            "name": {
              "description": "The name of the relationship of the object type of the model to follow.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/RelationshipName"
                }
              ]
            },
            "predicate": {
              "description": "The predicate to apply on the related objects. If this is null, then the predicate evaluates to true as long as there is at least one related object present.",
              "anyOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ModelPredicate"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ArgumentPreset": {
          "$id": "https://hasura.io/jsonschemas/metadata/ArgumentPreset",
          "title": "ArgumentPreset",
          "description": "Preset value for an argument",
          "type": "object",
          "required": ["argument", "value"],
          "properties": {
            "argument": {
              "description": "Argument name for preset",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ArgumentName"
                }
              ]
            },
            "value": {
              "description": "Value for preset",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/ValueExpression2"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "ValueExpression2": {
          "$id": "https://hasura.io/jsonschemas/metadata/ValueExpression2",
          "title": "ValueExpression",
          "description": "An expression which evaluates to a value that can be used in permissions.",
          "oneOf": [
            {
              "title": "Literal",
              "type": "object",
              "required": ["literal"],
              "properties": {
                "literal": true
              },
              "additionalProperties": false
            },
            {
              "title": "SessionVariable",
              "type": "object",
              "required": ["sessionVariable"],
              "properties": {
                "sessionVariable": {
                  "$ref": "#/anyOf/0/definitions/OpenDdSessionVariable"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "CommandPermissionsV1": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandPermissionsV1",
          "title": "CommandPermissionsV1",
          "description": "Definition of permissions for an OpenDD command.",
          "examples": [
            {
              "commandName": "get_article_by_id",
              "permissions": [
                {
                  "role": "admin",
                  "allowExecution": true
                },
                {
                  "role": "user",
                  "allowExecution": true
                }
              ]
            }
          ],
          "type": "object",
          "required": ["commandName", "permissions"],
          "properties": {
            "commandName": {
              "description": "The name of the command for which permissions are being defined.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/CommandName"
                }
              ]
            },
            "permissions": {
              "description": "A list of command permissions, one for each role.",
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/CommandPermission"
              }
            }
          },
          "additionalProperties": false
        },
        "CommandPermission": {
          "$id": "https://hasura.io/jsonschemas/metadata/CommandPermission",
          "title": "CommandPermission",
          "description": "Defines the permissions for a role for a command.",
          "examples": [
            {
              "role": "user",
              "allowExecution": true,
              "argumentPresets": [
                {
                  "argument": "user_id",
                  "value": {
                    "session_variable": "x-hasura-user_id"
                  }
                }
              ]
            }
          ],
          "type": "object",
          "required": ["allowExecution", "role"],
          "properties": {
            "role": {
              "description": "The role for which permissions are being defined.",
              "allOf": [
                {
                  "$ref": "#/anyOf/0/definitions/Role"
                }
              ]
            },
            "allowExecution": {
              "description": "Whether the command is executable by the role.",
              "type": "boolean"
            },
            "argumentPresets": {
              "description": "Preset values for arguments for this role",
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/anyOf/0/definitions/ArgumentPreset"
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CliManifestObject",
      "anyOf": [
        {
          "$ref": "#/anyOf/1/definitions/CliSupergraphObject"
        },
        {
          "$ref": "#/anyOf/1/definitions/CliSubgraphObject"
        }
      ],
      "definitions": {
        "CliSupergraphObject": {
          "title": "CliSupergraphObject",
          "anyOf": [
            {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "const": "SupergraphManifest"
                },
                "version": {
                  "type": "string",
                  "const": "v1"
                },
                "definition": {
                  "$ref": "#/anyOf/1/definitions/CliSupergraphObject/anyOf/0/definitions/SupergraphManifestDefinition",
                  "description": "Details of how to build the Supergraph."
                }
              },
              "required": ["kind", "version", "definition"],
              "additionalProperties": false,
              "description": "Details of how to build the Supergraph.",
              "title": "SupergraphManifest",
              "definitions": {
                "SupergraphManifestDefinition": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the supergraph manifest."
                    },
                    "environment": {
                      "type": "string",
                      "description": "The environment to create the build in."
                    },
                    "envfile": {
                      "type": "string",
                      "description": "Path to the YAML file containing environment variables."
                    },
                    "subgraphs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Names of subgraphs to be considered.",
                      "minItems": 1
                    }
                  },
                  "required": ["name", "environment", "subgraphs"],
                  "additionalProperties": false,
                  "description": "Details of how to build the Supergraph."
                }
              }
            }
          ]
        },
        "CliSubgraphObject": {
          "title": "CliSubgraphObject",
          "anyOf": [
            {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string",
                  "const": "ConnectorManifest"
                },
                "version": {
                  "type": "string",
                  "const": "v1"
                },
                "spec": {
                  "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/ConnectorManifestSpec",
                  "description": "Connector Manifest Spec"
                },
                "definition": {
                  "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/ConnectorManifestDefinition",
                  "description": "Connector Manifest Definition"
                }
              },
              "required": ["kind", "version", "spec", "definition"],
              "additionalProperties": false,
              "description": "Defines the configuration used to build the connector.",
              "title": "ConnectorManifest",
              "definitions": {
                "ConnectorManifestSpec": {
                  "type": "object",
                  "properties": {
                    "supergraphManifests": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "List of SupergraphManifests this ConnectorManifest is a part of.",
                      "minItems": 1
                    }
                  },
                  "required": ["supergraphManifests"],
                  "additionalProperties": false,
                  "description": "Connector Manifest Spec"
                },
                "ConnectorManifestDefinition": {
                  "anyOf": [
                    {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/CloudConnectorManifestDefinition"
                    },
                    {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/EndpointConnectorManifestDefinition"
                    }
                  ],
                  "description": "Defines the configuration used to build a connector."
                },
                "CloudConnectorManifestDefinition": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the connector."
                    },
                    "type": {
                      "type": "string",
                      "const": "cloud",
                      "description": "Deployment type of the connector."
                    },
                    "connector": {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/ConnectorType",
                      "description": "Type of connector."
                    },
                    "deployments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/CloudDeployment"
                      },
                      "description": "Details about the cloud deployments for the connector.",
                      "minItems": 1
                    }
                  },
                  "required": ["name", "type", "connector", "deployments"],
                  "additionalProperties": false,
                  "description": "Defines the configuration used to build a cloud connector."
                },
                "ConnectorType": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["hub", "inline"],
                      "description": "Type of connector."
                    },
                    "name": {
                      "type": "string",
                      "description": "Hub connector ID (Name and version)"
                    }
                  },
                  "required": ["type"],
                  "additionalProperties": false,
                  "description": "Connector Type information."
                },
                "CloudDeployment": {
                  "type": "object",
                  "properties": {
                    "region": {
                      "type": "string",
                      "description": "Region of deployment."
                    },
                    "mode": {
                      "type": "string",
                      "enum": ["ReadWrite", "ReadOnly", "WriteOnly"],
                      "description": "Mode of deployment."
                    },
                    "context": {
                      "type": "string",
                      "description": "Path of the connector context directory."
                    },
                    "env": {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/Envs",
                      "description": "Environment variables for the connector build."
                    }
                  },
                  "required": ["context", "env"],
                  "additionalProperties": false,
                  "description": "Details about the cloud deployments for the connector."
                },
                "Envs": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/ValueOrFromEnv"
                  },
                  "description": "Environment variables for the connector deployment."
                },
                "ValueOrFromEnv": {
                  "anyOf": [
                    {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/EnvValue"
                    },
                    {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/EnvValueFromEnv"
                    }
                  ],
                  "description": "Specifies an explicit value for the Env var or loads it from provided Env vars to the command."
                },
                "EnvValue": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": ["value"],
                  "additionalProperties": false,
                  "description": "Explicit value of an Env var."
                },
                "EnvValueFromEnv": {
                  "type": "object",
                  "properties": {
                    "valueFromEnv": {
                      "type": "string"
                    }
                  },
                  "required": ["valueFromEnv"],
                  "additionalProperties": false,
                  "description": "Load Env var value from the provided Env vars to the command."
                },
                "EndpointConnectorManifestDefinition": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the connector."
                    },
                    "type": {
                      "type": "string",
                      "const": "endpoints",
                      "description": "Deployment type of the connector."
                    },
                    "deployments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/EndpointDeployment"
                      },
                      "description": "Details about the connector endpoint.",
                      "minItems": 1,
                      "maxItems": 1
                    }
                  },
                  "required": ["name", "type", "deployments"],
                  "additionalProperties": false,
                  "description": "Defines the configuration used to build a local connector."
                },
                "EndpointDeployment": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "$ref": "#/anyOf/1/definitions/CliSubgraphObject/anyOf/0/definitions/ValueOrFromEnv",
                      "description": "Endpoint of the connector."
                    }
                  },
                  "required": ["endpoint"],
                  "additionalProperties": false,
                  "description": "Details about the connector endpoint."
                }
              }
            }
          ]
        }
      }
    }
  ]
}
