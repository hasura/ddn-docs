{
  "title": "SupergraphOrSubgraphObject",
  "anyOf": [
    {
      "$ref": "#/definitions/SupergraphObject",
      "anyOf": [
        {
          "$ref": "#/definitions/HasuraSupergraphObject",
          "oneOf": [
            {
              "title": "CompatibilityConfig",
              "description": "The compatibility configuration of the Hasura metadata.",
              "type": "object",
              "additionalProperties": false,
              "required": ["date", "kind"],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": ["CompatibilityConfig"]
                },
                "date": {
                  "description": "Any backwards incompatible changes made to Hasura DDN after this date won't impact the metadata.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/CompatibilityDate",
                      "type": "string"
                    }
                  ]
                }
              }
            },
            {
              "title": "AuthConfig",
              "description": "Definition of the authentication configuration used by the API server.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["AuthConfig"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/AuthConfigV1",
                      "title": "AuthConfigV1",
                      "description": "Definition of the authentication configuration used by the API server.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["mode"],
                      "examples": [
                        {
                          "allowRoleEmulationBy": "admin",
                          "mode": {
                            "webhook": {
                              "url": "http://auth_hook:3050/validate-request",
                              "method": "Post"
                            }
                          }
                        }
                      ],
                      "properties": {
                        "allowRoleEmulationBy": {
                          "anyOf": [
                            {
                              "$ref": "#/definitions/Role",
                              "type": "string"
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "mode": {
                          "$ref": "#/definitions/AuthModeConfig",
                          "title": "AuthModeConfig",
                          "description": "The configuration for the authentication mode to use - webhook or JWT.",
                          "oneOf": [
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["webhook"],
                              "properties": {
                                "webhook": {
                                  "$ref": "#/definitions/AuthHookConfig",
                                  "title": "AuthHookConfig",
                                  "description": "The configuration of the authentication webhook.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["method", "url"],
                                  "examples": [
                                    {
                                      "url": "http://auth_hook:3050/validate-request",
                                      "method": "Post"
                                    }
                                  ],
                                  "properties": {
                                    "url": {
                                      "description": "The URL of the authentication webhook.",
                                      "type": "string"
                                    },
                                    "method": {
                                      "description": "The HTTP method to be used to make the request to the auth hook.",
                                      "allOf": [
                                        {
                                          "$ref": "#/definitions/AuthHookMethod",
                                          "title": "AuthHookMethod",
                                          "type": "string",
                                          "enum": ["Get", "Post"]
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["jwt"],
                              "properties": {
                                "jwt": {
                                  "$ref": "#/definitions/JWTConfig",
                                  "title": "JWTConfig",
                                  "description": "JWT config according to which the incoming JWT will be verified and decoded to extract the session variable claims.",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["claimsConfig", "key", "tokenLocation"],
                                  "examples": [
                                    {
                                      "audience": null,
                                      "issuer": null,
                                      "allowedSkew": null,
                                      "claimsConfig": {
                                        "namespace": {
                                          "claimsFormat": "Json",
                                          "location": "/https:~1~1hasura.io~1jwt~1claims"
                                        }
                                      },
                                      "tokenLocation": {
                                        "type": "BearerAuthorization"
                                      },
                                      "key": {
                                        "fixed": {
                                          "algorithm": "HS256",
                                          "key": {
                                            "value": "token"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "properties": {
                                    "audience": {
                                      "description": "Optional validation to check that the `aud` field is a member of the `audience` recieved, otherwise will throw error.",
                                      "type": ["array", "null"]
                                    },
                                    "issuer": {
                                      "description": "Optional validation to check that the `iss` field is a member of the `iss` received, otherwise will throw error.",
                                      "type": ["string", "null"]
                                    },
                                    "allowedSkew": {
                                      "description": "Allowed leeway (in seconds) to the `exp` validation to account for clock skew.",
                                      "type": ["integer", "null"]
                                    },
                                    "claimsConfig": {
                                      "description": "Claims config. Either specified via `claims_mappings` or `claims_namespace_path`",
                                      "allOf": [
                                        {
                                          "$ref": "#/definitions/JWTClaimsConfig",
                                          "title": "JWTClaimsConfig",
                                          "description": "Config to describe how/where the engine should look for the claims within the decoded token.",
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["locations"],
                                              "properties": {
                                                "locations": {
                                                  "$ref": "#/definitions/JWTClaimsMap",
                                                  "title": "JWTClaimsMap",
                                                  "description": "Can be used when Hasura claims are not all present in the single object, but individual claims are provided a JSON pointer within the decoded JWT and optionally a default value.",
                                                  "type": "object",
                                                  "required": ["x-hasura-allowed-roles", "x-hasura-default-role"],
                                                  "properties": {
                                                    "x-hasura-default-role": {
                                                      "description": "JSON pointer to lookup the default role within the decoded JWT.",
                                                      "allOf": [
                                                        {
                                                          "$ref": "#/definitions/JWTClaimsMappingEntry_for_Role",
                                                          "title": "JWTClaimsMappingEntry",
                                                          "oneOf": [
                                                            {
                                                              "description": "Literal value of the claims mapping",
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["literal"],
                                                              "properties": {
                                                                "literal": {
                                                                  "$ref": "#/definitions/Role",
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["path"],
                                                              "properties": {
                                                                "path": {
                                                                  "$ref": "#/definitions/JWTClaimsMappingPathEntry_for_Role",
                                                                  "title": "JWTClaimsMappingPathEntry",
                                                                  "type": "object",
                                                                  "additionalProperties": false,
                                                                  "required": ["path"],
                                                                  "properties": {
                                                                    "path": {
                                                                      "description": "JSON pointer to find the particular claim in the decoded JWT token.",
                                                                      "type": "string"
                                                                    },
                                                                    "default": {
                                                                      "description": "Default value to be used when no value is found when looking up the value using the `path`.",
                                                                      "anyOf": [
                                                                        {
                                                                          "$ref": "#/definitions/Role",
                                                                          "type": "string"
                                                                        },
                                                                        {
                                                                          "type": "null"
                                                                        }
                                                                      ]
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "x-hasura-allowed-roles": {
                                                      "description": "JSON pointer to lookup the allowed roles within the decoded JWT.",
                                                      "allOf": [
                                                        {
                                                          "$ref": "#/definitions/JWTClaimsMappingEntry_for_Array_of_Role",
                                                          "title": "JWTClaimsMappingEntry",
                                                          "oneOf": [
                                                            {
                                                              "description": "Literal value of the claims mapping",
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["literal"],
                                                              "properties": {
                                                                "literal": {
                                                                  "type": "array"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["path"],
                                                              "properties": {
                                                                "path": {
                                                                  "$ref": "#/definitions/JWTClaimsMappingPathEntry_for_Array_of_Role",
                                                                  "title": "JWTClaimsMappingPathEntry",
                                                                  "type": "object",
                                                                  "additionalProperties": false,
                                                                  "required": ["path"],
                                                                  "properties": {
                                                                    "path": {
                                                                      "description": "JSON pointer to find the particular claim in the decoded JWT token.",
                                                                      "type": "string"
                                                                    },
                                                                    "default": {
                                                                      "description": "Default value to be used when no value is found when looking up the value using the `path`.",
                                                                      "type": ["array", "null"]
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["namespace"],
                                              "properties": {
                                                "namespace": {
                                                  "$ref": "#/definitions/JWTClaimsNamespace",
                                                  "title": "JWTClaimsNamespace",
                                                  "description": "Used when all of the Hasura claims are present in a single object within the decoded JWT.",
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": ["claimsFormat", "location"],
                                                  "properties": {
                                                    "claimsFormat": {
                                                      "description": "Format in which the Hasura claims will be present.",
                                                      "allOf": [
                                                        {
                                                          "$ref": "#/definitions/JWTClaimsFormat",
                                                          "title": "JWTClaimsFormat",
                                                          "oneOf": [
                                                            {
                                                              "description": "Claims will be in the JSON format.",
                                                              "type": "string",
                                                              "enum": ["Json"]
                                                            },
                                                            {
                                                              "description": "Claims will be in the Stringified JSON format.",
                                                              "type": "string",
                                                              "enum": ["StringifiedJson"]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "location": {
                                                      "description": "Pointer to lookup the Hasura claims within the decoded claims.",
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "tokenLocation": {
                                      "description": "Source of the JWT authentication token.",
                                      "allOf": [
                                        {
                                          "$ref": "#/definitions/JWTTokenLocation",
                                          "title": "JWTTokenLocation",
                                          "description": "Source of the Authorization token",
                                          "oneOf": [
                                            {
                                              "description": "Get the bearer token from the `Authorization` header.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["type"],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": ["BearerAuthorization"]
                                                }
                                              }
                                            },
                                            {
                                              "title": "JWTCookieLocation",
                                              "description": "Get the token from the Cookie header under the specificied cookie name.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["name", "type"],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": ["Cookie"]
                                                },
                                                "name": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "title": "JWTHeaderLocation",
                                              "description": "Custom header from where the header should be parsed from.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["name", "type"],
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "enum": ["Header"]
                                                },
                                                "name": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "key": {
                                      "description": "Mode according to which the JWT auth is configured.",
                                      "allOf": [
                                        {
                                          "$ref": "#/definitions/JWTKey",
                                          "title": "JWTKey",
                                          "description": "JWT key configuration according to which the incoming JWT will be decoded.",
                                          "oneOf": [
                                            {
                                              "description": "JWT mode when the algorithm `type` and `key` is known",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["fixed"],
                                              "properties": {
                                                "fixed": {
                                                  "$ref": "#/definitions/JWTKeyConfig",
                                                  "title": "JWTKeyConfig",
                                                  "description": "JWT Secret config according to which the incoming JWT will be decoded.",
                                                  "type": "object",
                                                  "additionalProperties": false,
                                                  "required": ["algorithm", "key"],
                                                  "properties": {
                                                    "algorithm": {
                                                      "description": "The algorithm used to decode the JWT.",
                                                      "allOf": [
                                                        {
                                                          "$ref": "#/definitions/Algorithm",
                                                          "title": "JWTAlgorithm",
                                                          "description": "The algorithm used to decode the JWT.",
                                                          "oneOf": [
                                                            {
                                                              "description": "HMAC using SHA-256",
                                                              "type": "string",
                                                              "enum": ["HS256"]
                                                            },
                                                            {
                                                              "description": "HMAC using SHA-384",
                                                              "type": "string",
                                                              "enum": ["HS384"]
                                                            },
                                                            {
                                                              "description": "HMAC using SHA-512",
                                                              "type": "string",
                                                              "enum": ["HS512"]
                                                            },
                                                            {
                                                              "description": "ECDSA using SHA-256",
                                                              "type": "string",
                                                              "enum": ["ES256"]
                                                            },
                                                            {
                                                              "description": "ECDSA using SHA-384",
                                                              "type": "string",
                                                              "enum": ["ES384"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PKCS1-v1_5 using SHA-256",
                                                              "type": "string",
                                                              "enum": ["RS256"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PKCS1-v1_5 using SHA-384",
                                                              "type": "string",
                                                              "enum": ["RS384"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PKCS1-v1_5 using SHA-512",
                                                              "type": "string",
                                                              "enum": ["RS512"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PSS using SHA-256",
                                                              "type": "string",
                                                              "enum": ["PS256"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PSS using SHA-384",
                                                              "type": "string",
                                                              "enum": ["PS384"]
                                                            },
                                                            {
                                                              "description": "RSASSA-PSS using SHA-512",
                                                              "type": "string",
                                                              "enum": ["PS512"]
                                                            },
                                                            {
                                                              "description": "Edwards-curve Digital Signature Algorithm (EdDSA)",
                                                              "type": "string",
                                                              "enum": ["EdDSA"]
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    "key": {
                                                      "description": "The key to use for decoding the JWT.",
                                                      "allOf": [
                                                        {
                                                          "$ref": "#/definitions/EnvironmentValue",
                                                          "title": "EnvironmentValue",
                                                          "description": "Either a literal string or a reference to a Hasura secret",
                                                          "oneOf": [
                                                            {
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["value"],
                                                              "properties": {
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "type": "object",
                                                              "additionalProperties": false,
                                                              "required": ["valueFromEnv"],
                                                              "properties": {
                                                                "valueFromEnv": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "description": "JWT mode where the `type` and `key` parameters are obtained dynamically through JWK.",
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["jwkFromUrl"],
                                              "properties": {
                                                "jwkFromUrl": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "$ref": "#/definitions/OpenDdSupergraphObject",
          "oneOf": [
            {
              "title": "GraphqlConfig",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["GraphqlConfig"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/GraphqlConfigV1",
                      "title": "GraphqlConfigV1",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["mutation", "query"],
                      "properties": {
                        "query": {
                          "$ref": "#/definitions/QueryGraphqlConfig",
                          "title": "QueryGraphqlConfig",
                          "type": "object",
                          "additionalProperties": false,
                          "required": ["rootOperationTypeName"],
                          "properties": {
                            "rootOperationTypeName": {
                              "type": "string"
                            },
                            "argumentsInput": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/ArgumentsInputGraphqlConfig",
                                  "title": "ArgumentsInputGraphqlConfig",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["fieldName"],
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "limitInput": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/LimitInputGraphqlConfig",
                                  "title": "LimitInputGraphqlConfig",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["fieldName"],
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "offsetInput": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/OffsetInputGraphqlConfig",
                                  "title": "OffsetInputGraphqlConfig",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["fieldName"],
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    }
                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "filterInput": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/FilterInputGraphqlConfig",
                                  "title": "FilterInputGraphqlConfig",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["fieldName", "operatorNames"],
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    },
                                    "operatorNames": {
                                      "$ref": "#/definitions/FilterInputOperatorNames",
                                      "title": "FilterInputOperatorNames",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["and", "isNull", "not", "or"],
                                      "properties": {
                                        "and": {
                                          "type": "string"
                                        },
                                        "or": {
                                          "type": "string"
                                        },
                                        "not": {
                                          "type": "string"
                                        },
                                        "isNull": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            },
                            "orderByInput": {
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/OrderByInputGraphqlConfig",
                                  "title": "OrderByInputGraphqlConfig",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["enumDirectionValues", "enumTypeNames", "fieldName"],
                                  "properties": {
                                    "fieldName": {
                                      "type": "string"
                                    },
                                    "enumDirectionValues": {
                                      "$ref": "#/definitions/OrderByDirectionValues",
                                      "title": "OrderByDirectionValues",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["asc", "desc"],
                                      "properties": {
                                        "asc": {
                                          "type": "string"
                                        },
                                        "desc": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "enumTypeNames": {
                                      "type": "array"
                                    }
                                  }
                                },
                                {
                                  "type": "null"
                                }
                              ]
                            }
                          }
                        },
                        "mutation": {
                          "$ref": "#/definitions/MutationGraphqlConfig",
                          "title": "MutationGraphqlConfig",
                          "type": "object",
                          "additionalProperties": false,
                          "required": ["rootOperationTypeName"],
                          "properties": {
                            "rootOperationTypeName": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "$ref": "#/definitions/SubgraphObject",
      "anyOf": [
        {
          "$ref": "#/definitions/OpenDdSubgraphObject",
          "oneOf": [
            {
              "title": "DataConnectorLink",
              "description": "Definition of a data connector, used to bring in sources of data and connect them to OpenDD models and commands.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["DataConnectorLink"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/DataConnectorLinkV1",
                      "title": "DataConnectorLinkV1",
                      "description": "Definition of a data connector - version 1.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["name", "schema", "url"],
                      "examples": [
                        {
                          "name": "data_connector",
                          "url": {
                            "singleUrl": {
                              "value": "http://data_connector:8100"
                            }
                          },
                          "headers": {},
                          "schema": {
                            "version": "v0.1",
                            "schema": {
                              "scalar_types": {},
                              "object_types": {},
                              "collections": [],
                              "functions": [],
                              "procedures": []
                            },
                            "capabilities": {
                              "version": "0.1.0",
                              "capabilities": {
                                "query": {
                                  "variables": {}
                                },
                                "mutation": {}
                              }
                            }
                          }
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name of the data connector.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/DataConnectorName",
                              "description": "The name of a data connector.",
                              "type": "string"
                            }
                          ]
                        },
                        "url": {
                          "description": "The url(s) to access the data connector.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/DataConnectorUrlV1",
                              "title": "DataConnectorUrlV1",
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["singleUrl"],
                                  "properties": {
                                    "singleUrl": {
                                      "$ref": "#/definitions/EnvironmentValue",
                                      "title": "EnvironmentValue",
                                      "description": "Either a literal string or a reference to a Hasura secret",
                                      "oneOf": [
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "required": ["value"],
                                          "properties": {
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "required": ["valueFromEnv"],
                                          "properties": {
                                            "valueFromEnv": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["readWriteUrls"],
                                  "properties": {
                                    "readWriteUrls": {
                                      "$ref": "#/definitions/ReadWriteUrls",
                                      "title": "ReadWriteUrls",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["read", "write"],
                                      "properties": {
                                        "read": {
                                          "$ref": "#/definitions/EnvironmentValue",
                                          "title": "EnvironmentValue",
                                          "description": "Either a literal string or a reference to a Hasura secret",
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["value"],
                                              "properties": {
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["valueFromEnv"],
                                              "properties": {
                                                "valueFromEnv": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "write": {
                                          "$ref": "#/definitions/EnvironmentValue",
                                          "title": "EnvironmentValue",
                                          "description": "Either a literal string or a reference to a Hasura secret",
                                          "oneOf": [
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["value"],
                                              "properties": {
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "additionalProperties": false,
                                              "required": ["valueFromEnv"],
                                              "properties": {
                                                "valueFromEnv": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "headers": {
                          "description": "Key value map of HTTP headers to be sent with each request to the data connector.",
                          "type": "object",
                          "additionalProperties": {
                            "$ref": "#/definitions/EnvironmentValue"
                          }
                        },
                        "schema": {
                          "description": "The schema of the data connector. This schema is used as the source of truth when serving requests and the live schema of the data connector is not looked up.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/VersionedSchemaAndCapabilities",
                              "title": "VersionedSchemaAndCapabilities",
                              "oneOf": [
                                {
                                  "title": "SchemaAndCapabilitiesV01",
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["capabilities", "schema", "version"],
                                  "properties": {
                                    "version": {
                                      "type": "string",
                                      "enum": ["v0.1"]
                                    },
                                    "schema": {
                                      "error": "Could not resolve ref: https://raw.githubusercontent.com/hasura/ndc-spec/v0.1.0-rc.18/ndc-client/tests/json_schema/schema_response.jsonschema"
                                    },
                                    "capabilities": {
                                      "error": "Could not resolve ref: https://raw.githubusercontent.com/hasura/ndc-spec/v0.1.0-rc.18/ndc-client/tests/json_schema/capabilities_response.jsonschema"
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "ObjectType",
              "description": "Definition of a user-defined Open DD object type.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ObjectType"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/ObjectTypeV1",
                      "title": "ObjectTypeV1",
                      "description": "Definition of a user-defined Open DD object type.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["fields", "name"],
                      "examples": [
                        {
                          "name": "Author",
                          "fields": [
                            {
                              "name": "author_id",
                              "type": "Int!",
                              "description": "The id of the author"
                            },
                            {
                              "name": "first_name",
                              "type": "String",
                              "description": "The first name of the author"
                            },
                            {
                              "name": "last_name",
                              "type": "String",
                              "description": "The last name of the author"
                            }
                          ],
                          "globalIdFields": ["author_id"],
                          "graphql": {
                            "typeName": "Author",
                            "inputTypeName": null
                          },
                          "description": "An author of a book"
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name to give this object type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CustomTypeName",
                              "description": "The name of a user-defined type.",
                              "type": "string"
                            }
                          ]
                        },
                        "fields": {
                          "description": "The list of fields defined for this object type.",
                          "type": "array"
                        },
                        "globalIdFields": {
                          "description": "The subset of fields that uniquely identify this object in the domain. Setting this property will automatically implement the GraphQL Relay Node interface for this object type and add an `id` global ID field. If setting this property, there must not be a field named `id` already present.",
                          "type": ["array", "null"]
                        },
                        "graphql": {
                          "description": "Configuration for how this object type should appear in the GraphQL schema.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/ObjectTypeGraphQLConfiguration",
                              "title": "ObjectTypeGraphQLConfiguration",
                              "description": "GraphQL configuration of an Open DD object type.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "typeName": {
                                  "description": "The name to use for the GraphQL type representation of this object type when used in an output context.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "inputTypeName": {
                                  "description": "The name to use for the GraphQL type representation of this object type when used in an input context.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "description": {
                          "description": "The description of the object. Gets added to the description of the object's definition in the graphql schema.",
                          "type": ["string", "null"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "ScalarType",
              "description": "Definition of a user-defined scalar type that that has opaque semantics.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ScalarType"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/ScalarTypeV1",
                      "title": "ScalarTypeV1",
                      "description": "Definition of a user-defined scalar type that that has opaque semantics.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["name"],
                      "examples": [
                        {
                          "name": "CustomString",
                          "graphql": {
                            "typeName": "CustomString"
                          },
                          "description": "A custom string type"
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name to give this scalar type, used to refer to it elsewhere in the metadata. Must be unique across all types defined in this subgraph.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CustomTypeName",
                              "description": "The name of a user-defined type.",
                              "type": "string"
                            }
                          ]
                        },
                        "graphql": {
                          "description": "Configuration for how this scalar type should appear in the GraphQL schema.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/ScalarTypeGraphQLConfiguration",
                              "title": "ScalarTypeGraphQLConfiguration",
                              "description": "GraphQL configuration of an Open DD scalar type",
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["typeName"],
                              "properties": {
                                "typeName": {
                                  "description": "The name of the GraphQl type to use for this scalar.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "description": {
                          "description": "The description of this scalar. Gets added to the description of the scalar's definition in the graphql schema.",
                          "type": ["string", "null"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "DataConnectorScalarRepresentation",
              "description": "The representation of a data connector scalar in terms of Open DD types",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["DataConnectorScalarRepresentation"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/DataConnectorScalarRepresentationV1",
                      "title": "DataConnectorScalarRepresentationV1",
                      "description": "The representation of a data connector scalar in terms of Open DD types",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["dataConnectorName", "dataConnectorScalarType", "representation"],
                      "examples": [
                        {
                          "dataConnectorName": "data_connector",
                          "dataConnectorScalarType": "varchar",
                          "representation": "String",
                          "graphql": {
                            "comparisonExpressionTypeName": "String_Comparison_Exp"
                          }
                        }
                      ],
                      "properties": {
                        "dataConnectorName": {
                          "description": "The name of the data connector that this scalar type comes from.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/DataConnectorName",
                              "description": "The name of a data connector.",
                              "type": "string"
                            }
                          ]
                        },
                        "dataConnectorScalarType": {
                          "description": "The name of the scalar type coming from the data connector.",
                          "type": "string"
                        },
                        "representation": {
                          "description": "The name of the Open DD type that this data connector scalar type should be represented as.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/TypeName",
                              "anyOf": [
                                {
                                  "$ref": "#/definitions/InbuiltType",
                                  "title": "InbuiltType",
                                  "description": "An inbuilt primitive OpenDD type.",
                                  "type": "string",
                                  "enum": ["ID", "Int", "Float", "Boolean", "String"]
                                },
                                {
                                  "$ref": "#/definitions/CustomTypeName",
                                  "description": "The name of a user-defined type.",
                                  "type": "string"
                                }
                              ]
                            }
                          ]
                        },
                        "graphql": {
                          "description": "Configuration for how this scalar's operators should appear in the GraphQL schema.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/DataConnectorScalarGraphQLConfiguration",
                              "title": "DataConnectorScalarGraphQLConfiguration",
                              "description": "GraphQL configuration of a data connector scalar",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "comparisonExpressionTypeName": {
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "Model",
              "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Model"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/ModelV1",
                      "title": "ModelV1",
                      "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["filterableFields", "name", "objectType", "orderableFields"],
                      "examples": [
                        {
                          "name": "Articles",
                          "objectType": "article",
                          "globalIdSource": true,
                          "arguments": [],
                          "source": {
                            "dataConnectorName": "data_connector",
                            "collection": "articles",
                            "typeMapping": {
                              "article": {
                                "fieldMapping": {
                                  "article_id": {
                                    "column": "id"
                                  },
                                  "title": {
                                    "column": "title"
                                  },
                                  "author_id": {
                                    "column": "author_id"
                                  }
                                }
                              }
                            },
                            "argumentMapping": {}
                          },
                          "filterableFields": [
                            {
                              "fieldName": "article_id",
                              "operators": {
                                "enableAll": true
                              }
                            },
                            {
                              "fieldName": "title",
                              "operators": {
                                "enableAll": true
                              }
                            },
                            {
                              "fieldName": "author_id",
                              "operators": {
                                "enableAll": true
                              }
                            }
                          ],
                          "orderableFields": [
                            {
                              "fieldName": "article_id",
                              "orderByDirections": {
                                "enableAll": true
                              }
                            },
                            {
                              "fieldName": "title",
                              "orderByDirections": {
                                "enableAll": true
                              }
                            },
                            {
                              "fieldName": "author_id",
                              "orderByDirections": {
                                "enableAll": true
                              }
                            }
                          ],
                          "graphql": {
                            "selectUniques": [
                              {
                                "queryRootField": "ArticleByID",
                                "uniqueIdentifier": ["article_id"],
                                "description": "Description for the select unique ArticleByID"
                              }
                            ],
                            "selectMany": {
                              "queryRootField": "ArticleMany",
                              "description": "Description for the select many ArticleMany"
                            },
                            "argumentsInputType": null,
                            "filterExpressionType": "Article_Where_Exp",
                            "orderByExpressionType": "Article_Order_By"
                          },
                          "description": "Description for the model Articles"
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name of the data model.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/ModelName",
                              "description": "The name of data model.",
                              "type": "string"
                            }
                          ]
                        },
                        "objectType": {
                          "description": "The type of the objects of which this model is a collection.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CustomTypeName",
                              "description": "The name of a user-defined type.",
                              "type": "string"
                            }
                          ]
                        },
                        "globalIdSource": {
                          "description": "Whether this model should be used as the global ID source for all objects of its type.",
                          "type": "boolean"
                        },
                        "arguments": {
                          "description": "A list of arguments accepted by this model. Defaults to no arguments.",
                          "type": "array"
                        },
                        "source": {
                          "description": "The source configuration for this model.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/ModelSource",
                              "title": "ModelSource",
                              "description": "Description of how a model maps to a particular data connector",
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["collection", "dataConnectorName"],
                              "examples": [
                                {
                                  "dataConnectorName": "data_connector",
                                  "collection": "articles",
                                  "typeMapping": {
                                    "article": {
                                      "fieldMapping": {
                                        "article_id": {
                                          "column": "id"
                                        },
                                        "title": {
                                          "column": "title"
                                        },
                                        "author_id": {
                                          "column": "author_id"
                                        }
                                      }
                                    }
                                  },
                                  "argumentMapping": {}
                                }
                              ],
                              "properties": {
                                "dataConnectorName": {
                                  "description": "The name of the data connector backing this model.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/DataConnectorName",
                                      "description": "The name of a data connector.",
                                      "type": "string"
                                    }
                                  ]
                                },
                                "collection": {
                                  "description": "The collection in the data connector that backs this model.",
                                  "type": "string"
                                },
                                "typeMapping": {
                                  "description": "How the various types used in this model correspond to entities in the data connector.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "$ref": "#/definitions/TypeMapping"
                                  }
                                },
                                "argumentMapping": {
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "filterableFields": {
                          "description": "A list of fields that can be used to filter the objects in this model.",
                          "type": "array"
                        },
                        "orderableFields": {
                          "description": "A list of fields that can be used to order the objects in this model.",
                          "type": "array"
                        },
                        "graphql": {
                          "description": "Configuration for how this model should appear in the GraphQL schema.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/ModelGraphQlDefinition",
                              "title": "ModelGraphQlDefinition",
                              "description": "The definition of how a model appears in the GraphQL API.",
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["selectUniques"],
                              "examples": [
                                {
                                  "selectUniques": [
                                    {
                                      "queryRootField": "ArticleByID",
                                      "uniqueIdentifier": ["article_id"],
                                      "description": "Description for the select unique ArticleByID"
                                    }
                                  ],
                                  "selectMany": {
                                    "queryRootField": "ArticleMany",
                                    "description": "Description for the select many ArticleMany"
                                  },
                                  "argumentsInputType": null,
                                  "filterExpressionType": "Article_Where_Exp",
                                  "orderByExpressionType": "Article_Order_By"
                                }
                              ],
                              "properties": {
                                "selectUniques": {
                                  "description": "For each select unique defined here, a query root field is added to the GraphQL API that can be used to select a unique object from the model.",
                                  "type": "array"
                                },
                                "selectMany": {
                                  "description": "Select many configuration for a model adds a query root field to the GraphQl API that can be used to retrieve multiple objects from the model.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/SelectManyGraphQlDefinition",
                                      "title": "SelectManyGraphQlDefinition",
                                      "description": "The definition of the GraphQL API for selecting rows from a model.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["queryRootField"],
                                      "properties": {
                                        "queryRootField": {
                                          "description": "The name of the query root field for this API.",
                                          "allOf": [
                                            {
                                              "$ref": "#/definitions/GraphQlFieldName",
                                              "description": "The name of a GraphQL object field.",
                                              "type": "string"
                                            }
                                          ]
                                        },
                                        "description": {
                                          "description": "The description of the select many graphql definition of the model. Gets added to the description of the select many root field of the model in the graphql schema.",
                                          "type": ["string", "null"]
                                        }
                                      }
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "argumentsInputType": {
                                  "description": "The type name of the input type used to hold the arguments of the model.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "filterExpressionType": {
                                  "description": "The type name of the filter boolean expression input type.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                },
                                "orderByExpressionType": {
                                  "description": "The type name of the order by expression input type.",
                                  "anyOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlTypeName",
                                      "type": "string"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "description": {
                          "description": "The description of the model. Gets added to the description of the model in the graphql schema.",
                          "type": ["string", "null"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "Command",
              "description": "The definition of a command. A command is a user-defined operation which can take arguments and returns an output. The semantics of a command are opaque to the Open DD specification.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Command"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/CommandV1",
                      "title": "CommandV1",
                      "description": "Definition of an OpenDD Command, which is a custom operation that can take arguments and returns an output. The semantics of a command are opaque to OpenDD.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["name", "outputType"],
                      "examples": [
                        {
                          "name": "get_latest_article",
                          "outputType": "commandArticle",
                          "arguments": [],
                          "source": {
                            "dataConnectorName": "data_connector",
                            "dataConnectorCommand": {
                              "function": "latest_article"
                            },
                            "typeMapping": {
                              "commandArticle": {
                                "fieldMapping": {
                                  "article_id": {
                                    "column": "id"
                                  }
                                }
                              }
                            },
                            "argumentMapping": {}
                          },
                          "graphql": {
                            "rootFieldName": "getLatestArticle",
                            "rootFieldKind": "Query"
                          },
                          "description": "Get the latest article"
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name of the command.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CommandName",
                              "description": "The name of a command.",
                              "type": "string"
                            }
                          ]
                        },
                        "outputType": {
                          "description": "The return type of the command.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/TypeReference",
                              "title": "TypeReference",
                              "description": "A reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.",
                              "type": "string"
                            }
                          ]
                        },
                        "arguments": {
                          "description": "The list of arguments accepted by this command. Defaults to no arguments.",
                          "type": "array"
                        },
                        "source": {
                          "description": "The source configuration for this command.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandSource",
                              "title": "CommandSource",
                              "description": "Description of how a command maps to a particular data connector",
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["dataConnectorCommand", "dataConnectorName"],
                              "examples": [
                                {
                                  "dataConnectorName": "data_connector",
                                  "dataConnectorCommand": {
                                    "function": "latest_article"
                                  },
                                  "typeMapping": {},
                                  "argumentMapping": {}
                                }
                              ],
                              "properties": {
                                "dataConnectorName": {
                                  "description": "The name of the data connector backing this command.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/DataConnectorName",
                                      "description": "The name of a data connector.",
                                      "type": "string"
                                    }
                                  ]
                                },
                                "dataConnectorCommand": {
                                  "description": "The function/procedure in the data connector that backs this command.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/DataConnectorCommand",
                                      "title": "DataConnectorCommand",
                                      "oneOf": [
                                        {
                                          "title": "Function",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "required": ["function"],
                                          "properties": {
                                            "function": {
                                              "$ref": "#/definitions/FunctionName",
                                              "description": "The name of a function backing the command.",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        {
                                          "title": "Procedure",
                                          "type": "object",
                                          "additionalProperties": false,
                                          "required": ["procedure"],
                                          "properties": {
                                            "procedure": {
                                              "$ref": "#/definitions/ProcedureName",
                                              "description": "The name of a procedure backing the command.",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "typeMapping": {
                                  "description": "How the various types used in this command correspond to entities in the data connector.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "$ref": "#/definitions/TypeMapping"
                                  }
                                },
                                "argumentMapping": {
                                  "description": "Mapping from command argument names to data connector table argument names.",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "graphql": {
                          "description": "Configuration for how this command should appear in the GraphQL schema.",
                          "anyOf": [
                            {
                              "$ref": "#/definitions/CommandGraphQlDefinition",
                              "title": "CommandGraphQlDefinition",
                              "description": "The definition of how a command should appear in the GraphQL API.",
                              "type": "object",
                              "additionalProperties": false,
                              "required": ["rootFieldKind", "rootFieldName"],
                              "examples": [
                                {
                                  "rootFieldName": "getLatestArticle",
                                  "rootFieldKind": "Query"
                                }
                              ],
                              "properties": {
                                "rootFieldName": {
                                  "description": "The name of the graphql root field to use for this command.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlFieldName",
                                      "description": "The name of a GraphQL object field.",
                                      "type": "string"
                                    }
                                  ]
                                },
                                "rootFieldKind": {
                                  "description": "Whether to put this command in the Query or Mutation root of the GraphQL API.",
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/GraphQlRootFieldKind",
                                      "title": "GraphQlRootFieldKind",
                                      "type": "string",
                                      "enum": ["Query", "Mutation"]
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "null"
                            }
                          ]
                        },
                        "description": {
                          "description": "The description of the command. Gets added to the description of the command's root field in the graphql schema.",
                          "type": ["string", "null"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "Relationship",
              "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["Relationship"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/RelationshipV1",
                      "title": "RelationshipV1",
                      "description": "Definition of a relationship on an OpenDD type which allows it to be extended with related models or commands.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["mapping", "name", "source", "target"],
                      "examples": [
                        {
                          "name": "Articles",
                          "source": "author",
                          "target": {
                            "model": {
                              "name": "Articles",
                              "namespace": null,
                              "subgraph": null,
                              "relationshipType": "Array"
                            }
                          },
                          "mapping": [
                            {
                              "source": {
                                "fieldPath": [
                                  {
                                    "fieldName": "author_id"
                                  }
                                ]
                              },
                              "target": {
                                "modelField": [
                                  {
                                    "fieldName": "author_id"
                                  }
                                ]
                              }
                            }
                          ],
                          "description": "Articles written by an author"
                        }
                      ],
                      "properties": {
                        "name": {
                          "description": "The name of the relationship.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/RelationshipName",
                              "description": "The name of the GraphQL relationship field.",
                              "type": "string"
                            }
                          ]
                        },
                        "source": {
                          "description": "The source type of the relationship.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CustomTypeName",
                              "description": "The name of a user-defined type.",
                              "type": "string"
                            }
                          ]
                        },
                        "target": {
                          "description": "The target of the relationship.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/RelationshipTarget",
                              "title": "RelationshipTarget",
                              "description": "The target for a relationship.",
                              "examples": [
                                {
                                  "model": {
                                    "name": "Articles",
                                    "namespace": null,
                                    "subgraph": null,
                                    "relationshipType": "Array"
                                  }
                                }
                              ],
                              "oneOf": [
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["model"],
                                  "properties": {
                                    "model": {
                                      "$ref": "#/definitions/ModelRelationshipTarget",
                                      "title": "ModelRelationshipTarget",
                                      "description": "The target model for a relationship.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["name", "relationshipType"],
                                      "properties": {
                                        "name": {
                                          "description": "The name of the data model.",
                                          "allOf": [
                                            {
                                              "$ref": "#/definitions/ModelName",
                                              "description": "The name of data model.",
                                              "type": "string"
                                            }
                                          ]
                                        },
                                        "namespace": {
                                          "type": ["string", "null"]
                                        },
                                        "subgraph": {
                                          "description": "The subgraph of the target model. Defaults to the current subgraph.",
                                          "type": ["string", "null"]
                                        },
                                        "relationshipType": {
                                          "description": "Type of the relationship - object or array.",
                                          "allOf": [
                                            {
                                              "$ref": "#/definitions/RelationshipType",
                                              "title": "RelationshipType",
                                              "description": "Type of the relationship.",
                                              "oneOf": [
                                                {
                                                  "description": "Select one related object from the target.",
                                                  "type": "string",
                                                  "enum": ["Object"]
                                                },
                                                {
                                                  "description": "Select multiple related objects from the target.",
                                                  "type": "string",
                                                  "enum": ["Array"]
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "required": ["command"],
                                  "properties": {
                                    "command": {
                                      "$ref": "#/definitions/CommandRelationshipTarget",
                                      "title": "CommandRelationshipTarget",
                                      "description": "The target command for a relationship.",
                                      "type": "object",
                                      "additionalProperties": false,
                                      "required": ["name"],
                                      "properties": {
                                        "name": {
                                          "description": "The name of the command.",
                                          "allOf": [
                                            {
                                              "$ref": "#/definitions/CommandName",
                                              "description": "The name of a command.",
                                              "type": "string"
                                            }
                                          ]
                                        },
                                        "subgraph": {
                                          "description": "The subgraph of the target command. Defaults to the current subgraph.",
                                          "type": ["string", "null"]
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "mapping": {
                          "description": "The mapping configuration of source to target for the relationship.",
                          "type": "array"
                        },
                        "description": {
                          "description": "The description of the relationship. Gets added to the description of the relationship in the graphql schema.",
                          "type": ["string", "null"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "TypePermissions",
              "description": "Definition of permissions for an OpenDD type.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["TypePermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/TypePermissionsV1",
                      "title": "TypePermissionsV1",
                      "description": "Definition of permissions for an OpenDD type.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["permissions", "typeName"],
                      "examples": [
                        {
                          "typeName": "article",
                          "permissions": [
                            {
                              "role": "admin",
                              "output": {
                                "allowedFields": ["article_id", "author_id", "title"]
                              }
                            },
                            {
                              "role": "user",
                              "output": {
                                "allowedFields": ["article_id", "author_id"]
                              }
                            }
                          ]
                        }
                      ],
                      "properties": {
                        "typeName": {
                          "description": "The name of the type for which permissions are being defined. Must be an object type.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CustomTypeName",
                              "description": "The name of a user-defined type.",
                              "type": "string"
                            }
                          ]
                        },
                        "permissions": {
                          "description": "A list of type permissions, one for each role.",
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "ModelPermissions",
              "description": "Definition of permissions for an OpenDD model.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["ModelPermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/ModelPermissionsV1",
                      "title": "ModelPermissionsV1",
                      "description": "Definition of permissions for an OpenDD model.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["modelName", "permissions"],
                      "examples": [
                        {
                          "modelName": "Articles",
                          "permissions": [
                            {
                              "role": "admin",
                              "select": {
                                "filter": null
                              }
                            },
                            {
                              "role": "user",
                              "select": {
                                "filter": {
                                  "fieldComparison": {
                                    "field": "author_id",
                                    "operator": "_eq",
                                    "value": {
                                      "sessionVariable": "x-hasura-user-id"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ],
                      "properties": {
                        "modelName": {
                          "description": "The name of the model for which permissions are being defined.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/ModelName",
                              "description": "The name of data model.",
                              "type": "string"
                            }
                          ]
                        },
                        "permissions": {
                          "description": "A list of model permissions, one for each role.",
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "title": "CommandPermissions",
              "description": "Definition of permissions for an OpenDD command.",
              "oneOf": [
                {
                  "type": "object",
                  "additionalProperties": false,
                  "required": ["definition", "kind", "version"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["CommandPermissions"]
                    },
                    "version": {
                      "type": "string",
                      "enum": ["v1"]
                    },
                    "definition": {
                      "$ref": "#/definitions/CommandPermissionsV1",
                      "title": "CommandPermissionsV1",
                      "description": "Definition of permissions for an OpenDD command.",
                      "type": "object",
                      "additionalProperties": false,
                      "required": ["commandName", "permissions"],
                      "examples": [
                        {
                          "commandName": "get_article_by_id",
                          "permissions": [
                            {
                              "role": "admin",
                              "allowExecution": true
                            },
                            {
                              "role": "user",
                              "allowExecution": true
                            }
                          ]
                        }
                      ],
                      "properties": {
                        "commandName": {
                          "description": "The name of the command for which permissions are being defined.",
                          "allOf": [
                            {
                              "$ref": "#/definitions/CommandName",
                              "description": "The name of a command.",
                              "type": "string"
                            }
                          ]
                        },
                        "permissions": {
                          "description": "A list of command permissions, one for each role.",
                          "type": "array"
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
