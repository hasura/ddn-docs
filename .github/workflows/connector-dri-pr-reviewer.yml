# Connector Docs DRI Reviewer Workflow
#
# This workflow automatically assigns the Connector DRI to the PR for any edits to the connector docs.
#
# How it works:
# 1. Identifies changed files in PR that match connector documentation paths
# 2. For each changed file, extracts the connector folder name using regex
# 3. Queries an external API endpoint to get the DRI information for each connector folder
# 4. Processes DRI GitHub handles (removing @ prefix if present)
# 5. Requests reviews from all identified DRIs on the PR

name: Connector Docs DRI Reviewer

on:
  pull_request_target:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'docs/reference/connectors/**'
  workflow_dispatch:

jobs:
  connector-docs-dri-reviewer:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 1

      - name: Get changed connector docs
        id: changed_connector_files
        uses: tj-actions/changed-files@v44
        with:
          files: docs/reference/connectors/**

      - name: Assign DRI based on changed connector docs
        if: steps.changed_connector_files.outputs.all_modified_files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.DOCS_GITHUB_TOKEN}}
          script: |
            // Helper function to fetch DRI information by property and value
            async function getDRIByProperty(property, value) {
              const url = `https://website-api.hasura.io/docs-services/docs-server/dri/lookup?property=${encodeURIComponent(property)}&value=${encodeURIComponent(value)}`;
              
              try {
                const response = await fetch(url);
                
                if (!response.ok) {
                  console.error(`Error fetching DRI data: ${response.status} ${response.statusText}`);
                  return null;
                }
                
                const data = await response.json();
                return data.length > 0 ? data[0] : null;
              } catch (error) {
                console.error(`Failed to fetch DRI data: ${error.message}`);
                return null;
              }
            }

            const changedFiles = `${{ steps.changed_connector_files.outputs.all_modified_files }}`.split(' ').filter(f => f.length > 0);
            if (changedFiles.length === 0) {
              console.log("No relevant connector documentation files changed.");
              return;
            }
            console.log("Changed connector files:", changedFiles);

            const assignees = new Set();
            const connectorPathRegex = /^docs\/reference\/connectors\/([^\/]+)\//;
            const uniqueConnectorFolders = new Set();

            // First extract all unique connector folders
            for (const filePath of changedFiles) {
              const match = filePath.match(connectorPathRegex);
              if (match && match[1]) {
                uniqueConnectorFolders.add(match[1]);
              }
            }

            console.log(`Found unique connector folders: ${Array.from(uniqueConnectorFolders).join(', ')}`);

            // Now fetch DRI information for each unique connector folder
            for (const connectorFolder of uniqueConnectorFolders) {
              console.log(`Looking up DRI for connector folder: ${connectorFolder}`);
              
              // Fetch DRI information from the API
              const connectorInfo = await getDRIByProperty('registry-folder', connectorFolder);
              
              if (connectorInfo && connectorInfo['dri-github-handle'] && connectorInfo['dri-github-handle'].toLowerCase() !== 'null') {
                let handle = connectorInfo['dri-github-handle'];
                if (handle.startsWith('@')) {
                  handle = handle.substring(1);
                }
                if (handle) {
                  assignees.add(handle);
                  console.log(`Found DRI ${handle} for connector ${connectorFolder}`);
                }
              } else {
                console.log(`No DRI found for connector folder: ${connectorFolder}`);
              }
            }

            const drIndividuals = Array.from(assignees);
            if (drIndividuals.length > 0) {
              console.log(`Requesting review from DRIs: ${drIndividuals.join(', ')} on PR #${context.issue.number}`);
              const response = await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: drIndividuals
              });
              console.log("Reviewers Response:", response);
              console.log("Done requesting reviews from DRIs.");
            } else {
              console.log("No DRIs found to request a review for the changed files.");
            }
