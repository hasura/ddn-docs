# Connector Docs DRI Reviewer Workflow
#
# This workflow automatically assigns the Connector DRI to the PR for any edits to the connector docs.

name: Connector Docs DRI Reviewer

on:
  pull_request_target:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'docs/reference/connectors/**'
  workflow_dispatch:

jobs:
  connector-docs-dri-reviewer:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 1

      - name: Get changed connector docs
        id: changed_connector_files
        uses: tj-actions/changed-files@v44
        with:
          files: docs/reference/connectors/**

      - name: Assign DRI based on changed connector docs
        if: steps.changed_connector_files.outputs.all_modified_files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.DOCS_GITHUB_TOKEN}}
          script: |
            const response = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
              owner: 'hasura',
              repo: 'docs-services',
              path: 'docs-server/src/connector-dri-mapping.md'
            });

            const decodedContent = Buffer.from(response.data.content, 'base64').toString();
            const markdownTableData = decodedContent;

            function parseMarkdownTable(markdown) {
              const lines = markdown.trim().split("\n").filter(line => line.trim().startsWith("|"));
              if (lines.length < 2) {
                console.warn("Markdown table is too short or invalid.");
                return [];
              }
              const parseRow = (line) =>
                line.trim().slice(1, -1).split("|").map(cell => cell.trim());

              const headers = parseRow(lines[0]);
              const rows = lines.slice(2).map(parseRow); // skip header and separator

              return rows.map(row => {
                const obj = {};
                headers.forEach((header, index) => {
                  obj[header] = row[index] || "";
                });
                return obj;
              });
            }

            const connectorDRIdata = parseMarkdownTable(markdownTableData);

            const changedFiles = `${{ steps.changed_connector_files.outputs.all_modified_files }}`.split(' ').filter(f => f.length > 0);
            if (changedFiles.length === 0) {
              console.log("No relevant connector documentation files changed.");
              return;
            }
            console.log("Changed connector files:", changedFiles);

            const assignees = new Set();
            const connectorPathRegex = /^docs\/reference\/connectors\/([^\/]+)\//;

            for (const filePath of changedFiles) {
              const match = filePath.match(connectorPathRegex);
              if (match && match[1]) {
                const connectorFolder = match[1];
                const connectorInfo = connectorDRIdata.find(row => row['registry-folder'] === connectorFolder);
                if (connectorInfo && connectorInfo['dri-github-handle'] && connectorInfo['dri-github-handle'].toLowerCase() !== 'null') {
                  let handle = connectorInfo['dri-github-handle'];
                  if (handle.startsWith('@')) {
                    handle = handle.substring(1);
                  }
                  if (handle) {
                    assignees.add(handle);
                  }
                }
              }
            }

            const drIndividuals = Array.from(assignees);
            if (drIndividuals.length > 0) {
              console.log(`Requesting review from DRIs: ${drIndividuals.join(', ')} on PR #${context.issue.number}`);
              const response = await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: drIndividuals
              });
              console.log("Reviewers Response:", response);
              console.log("Done requesting reviews from DRIs.");
            } else {
              console.log("No DRIs found to request a review for the changed files.");
            }
