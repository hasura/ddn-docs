# Connector Docs DRI Reviewer Workflow
#
# This workflow automatically assigns the Connector DRI to the PR for any edits to the connector docs.
# #
# | connector         | github-repo                                   | registry-folder   | dri-name                | dri-github-handle | dri-slack-handle | dri-linear-handle | dri-email               |
# | ----------------- | --------------------------------------------- | ----------------- | ----------------------- | ----------------- | ---------------- | ----------------- | ----------------------- |
# | Athena            | hasura/ndc-jdbc                               | athena            | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Azure Cosmos      | hasura/ndc-azure-cosmos-connector             | azure-cosmos      | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | BigQuery          | hasura/ndc-bigquery                           | bigquery          | Daniel Harvey           | @danieljharvey    | @Daniel Harvey   | @dan.harvey       | dan.harvey@hasura.io    |
# | Databricks        | hasura/ndc-databricks                         | databricks        | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | BigQuery JDBC     | hasura/ndc-jdbc                               | bigquery-jdbc     | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Cassandra         | hasura/ndc-cassandra                          | cassandra         | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | ClickHouse        | hasura/ndc-clickhouse                         | clickhouse        | Benoit Ranque           | @BenoitRanque     | @Benoit          | @benoit           | benoit@hasura.io        |
# | Databricks        | hasura/ndc-databricks                         | databricks        | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Databricks        | hasura/ndc-databricks                         | databricks        | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Databricks JDBC   | hasura/ndc-jdbc                               | databricks-jdbc   | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | DuckDB            | hasura/ndc-duckdb                             | duckdb            | Mohd Bilal              | @m-Bilal          | @Bilal           | @bilal            | bilal@hasura.io         |
# | DuckDuckAPI       | hasura/ndc-duckduckapi                        | duckduckapi       | Mohd Bilal              | @m-Bilal          | @Bilal           | @bilal            | bilal@hasura.io         |
# | Elasticsearch     | hasura/ndc-elasticsearch                      | elasticsearch     | Mohd Bilal              | @m-Bilal          | @Bilal           | @bilal            | bilal@hasura.io         |
# | Go                | hasura/ndc-go-lambda                          | go                | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | GraphQL           | hasura/ndc-graphql                            | graphql           | Benoit Ranque           | @BenoitRanque     | @Benoit          | @benoit           | benoit@hasura.io        |
# | HTTP              | hasura/ndc-http                               | http              | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | MongoDB           | hasura/ndc-mongodb                            | mongodb           | Jesse Hallett           | @hallettj         | @Jesse Hallett   | @jesse.hallett    | jesse.hallett@hasura.io |
# | MySQL             | hasura/ndc-jvm-mono                           | mysql             | Gavin Ray               | @GavinRay97       | @Gavin           | @gavin            | gavin@hasura.io         |
# | MySQL PromptQL    | hasura/ndc-jdbc                               | mysql-promptql    | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Node.js           | hasura/ndc-nodejs-lambda                      | nodejs            | Daniel Chambers         | @daniel-chambers  | @Daniel          | @daniel           | daniel@hasura.io        |
# | OpenAPI           | hasura/ndc-open-api-lambda                    | openapi           | Mohd Bilal              | @m-Bilal          | @Bilal           | @bilal            | bilal@hasura.io         |
# | Oracle            | hasura/ndc-jvm-mono                           | oracle            | Gavin Ray               | @GavinRay97       | @Gavin           | @gavin            | gavin@hasura.io         |
# | Phoenix           | hasura/ndc-jvm-mono                           | phoenix           | Gavin Ray               | @GavinRay97       | @Gavin           | @gavin            | gavin@hasura.io         |
# | Postgres          | hasura/ndc-postgres                           | postgres          | Daniel Harvey           | @danieljharvey    | @Daniel Harvey   | @dan.harvey       | dan.harvey@hasura.io    |
# | Postgres PromptQL | hasura/ndc-jdbc                               | postgres-promptql | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Prometheus        | hasura/ndc-prometheus                         | prometheus        | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | Python            | hasura/ndc-python-lambda                      | python            | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | Qdrant            | hasura/ndc-qdrant                             | qdrant            | Mohd Bilal              | @m-Bilal          | @Bilal           | @bilal            | bilal@hasura.io         |
# | Redshift          | hasura/ndc-jdbc                               | redshift          | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | SendGrid          | hasura/ndc-sendgrid                           | sendgrid          | Daniel Chambers         | @daniel-chambers  | @Daniel          | @daniel           | daniel@hasura.io        |
# | SingleStore       | singlestore-labs/singlestore-hasura-connector | singlestore       | null                    | null              | null             | null              | null                    |
# | Snowflake         | hasura/ndc-jvm-mono                           | snowflake         | Gavin Ray               | @GavinRay97       | @Gavin           | @gavin            | gavin@hasura.io         |
# | Snowflake JDBC    | hasura/ndc-jdbc                               | snowflake-jdbc    | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | SQL Server        | hasura/ndc-sqlserver                          | sqlserver         | Karthikeyan Chinnakonda | @codingkarthik    | @Karthikeyan     | @karthikeyan      | karthikeyan@hasura.io   |
# | Storage           | hasura/ndc-storage                            | storage           | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | Stripe            | hasura/ndc-stripe                             | stripe            | Toan Nguyen             | @hgiasac          | @Toan Nguyen     | @toan             | toan@hasura.io          |
# | Trino             | hasura/ndc-jvm-mono                           | trino             | Gavin Ray               | @GavinRay97       | @Gavin           | @gavin            | gavin@hasura.io         |
# | Turso             | hasura/ndc-turso                              | turso             | Daniel Chambers         | @daniel-chambers  | @Daniel          | @daniel           | daniel@hasura.io        |
#
# How it works:

name: Connector Docs DRI Reviewer

on:
  pull_request_target:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'docs/reference/connectors/**'
  workflow_dispatch:

jobs:
  connector-docs-dri-reviewer:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 1

      - name: Get changed connector docs
        id: changed_connector_files
        uses: tj-actions/changed-files@v44
        with:
          files: docs/reference/connectors/**

      - name: Assign DRI based on changed connector docs
        if: steps.changed_connector_files.outputs.all_modified_files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.DOCS_GITHUB_TOKEN}}
          script: |
            const response = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
              owner: 'hasura',
              repo: 'docs-services',
              path: 'docs-server/src/connector-dri-mapping.md'
            });

            const decodedContent = Buffer.from(response.data.content, 'base64').toString();
            const markdownTableData = decodedContent;

            function parseMarkdownTable(markdown) {
              const lines = markdown.trim().split("\n").filter(line => line.trim().startsWith("|"));
              if (lines.length < 2) {
                console.warn("Markdown table is too short or invalid.");
                return [];
              }
              const parseRow = (line) =>
                line.trim().slice(1, -1).split("|").map(cell => cell.trim());

              const headers = parseRow(lines[0]);
              const rows = lines.slice(2).map(parseRow); // skip header and separator

              return rows.map(row => {
                const obj = {};
                headers.forEach((header, index) => {
                  obj[header] = row[index] || "";
                });
                return obj;
              });
            }

            const connectorDRIdata = parseMarkdownTable(markdownTableData);
            console.log("Parsed DRI data:", connectorDRIdata);

            const changedFiles = `${{ steps.changed_connector_files.outputs.all_modified_files }}`.split(' ').filter(f => f.length > 0);
            if (changedFiles.length === 0) {
              console.log("No relevant connector documentation files changed.");
              return;
            }
            console.log("Changed connector files:", changedFiles);

            const assignees = new Set();
            const connectorPathRegex = /^docs\/reference\/connectors\/([^\/]+)\//;

            for (const filePath of changedFiles) {
              const match = filePath.match(connectorPathRegex);
              if (match && match[1]) {
                const connectorFolder = match[1];
                const connectorInfo = connectorDRIdata.find(row => row['registry-folder'] === connectorFolder);
                if (connectorInfo && connectorInfo['dri-github-handle'] && connectorInfo['dri-github-handle'].toLowerCase() !== 'null') {
                  let handle = connectorInfo['dri-github-handle'];
                  if (handle.startsWith('@')) {
                    handle = handle.substring(1);
                  }
                  if (handle) {
                    assignees.add(handle);
                  }
                }
              }
            }

            const drIndividuals = Array.from(assignees);
            if (drIndividuals.length > 0) {
              console.log(`Requesting review from DRIs: ${drIndividuals.join(', ')} on PR #${context.issue.number}`);
              const response = await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: drIndividuals
              });
              console.log("Reviewers Response:", response);
              console.log("Done requesting reviews from DRIs.");
            } else {
              console.log("No DRIs found to request a review for the changed files.");
            }
